<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>newkayak12.github.io</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <link>https://github.com/newkayak12/newkayak12.github.io/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Sun, 11 Aug 2024 10:52:13 +0900</pubDate>
    
      <item>
        <title>[programmers Series] Lv. 02 Numberconversion</title>
        <link>/2024/08/07/Programmers-series-LV.-02-NumberConversion.html</link>
        <guid isPermaLink="true">/2024/08/07/Programmers-series-LV.-02-NumberConversion.html</guid>
        <description>&lt;h1 id=&quot;숫자-변환하기&quot;&gt;숫자 변환하기&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/154538&quot;&gt;programmers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;pre&gt;
문제 설명

자연수 x를 y로 변환하려고 합니다. 사용할 수 있는 연산은 다음과 같습니다.
x에 n을 더합니다
x에 2를 곱합니다.
x에 3을 곱합니다.
자연수 x, y, n이 매개변수로 주어질 때, x를 y로 변환하기 위해 필요한 최소 연산 횟수를 return하도록 solution 함수를 완성해주세요. 이때 x를 y로 만들 수 없다면 -1을 return 해주세요.
제한사항
1 ≤ x ≤ y ≤ 1,000,000
1 ≤ n &amp;lt; y
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h2&gt;
&lt;p&gt;순회 -&amp;gt; BFS? DFS?&lt;/p&gt;

&lt;p&gt;DFS는 모든 케이스를 다 돌 것이고( 최소 케이스를 찾아야 하기 때문에 ) 분명 느릴 것이다.
BFS가 그나마 빠르겠다.&lt;/p&gt;

&lt;p&gt;막상 작성하면 같은 숫자가 나오는 경우가 중복되서 이마저 타임아웃이 난다.
Set으로 이미 나온 숫자가 나오면 스킵하자 어차피 연산은 3중 하나도 이미 해당 숫자가 있다면 계산이 됐을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumberConversion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 07 Aug 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[spring Series] 30.restdoc</title>
        <link>/spring/2024/08/04/Spring-series-30.RestDoc.html</link>
        <guid isPermaLink="true">/spring/2024/08/04/Spring-series-30.RestDoc.html</guid>
        <description>&lt;h1 id=&quot;restdoc&quot;&gt;Restdoc&lt;/h1&gt;

&lt;p&gt;spring에서 문서 자동화를 위해서 1) OpenAPI - Swagger, 2) Spring - Restdoc이 있다.&lt;/p&gt;

&lt;p&gt;Swagger는 보통 Swagger UI와 같이 사용하며, 소스코드에 어노테이션을 작성하여 Reflection으로 JSON을 만들고
이를 UI로 출력하는 형태를 가진다. 추가적으로 API 호출을 해볼 수 있다는 장점이 있다. 그러나 소스코드에 불필요한 어노테이션이 늘어서
불편하다는 단점이 있다.&lt;/p&gt;

&lt;p&gt;Restdoc은 테스트를 기반으로 문서를 작성한다. 테스트 코드에 문서화 코드를 삽입하고 테스트 결과를 바탕으로 asciiDoc으로 작성하며
HTML로 변환할 수도 있다. 그러나 API 호출을 해볼 수는 없다는 단점이 존재한다.&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asciidoctorExtensions&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.restdocs:spring-restdocs-asciidoctor'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testImplementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.restdocs:spring-restdocs-mockmvc'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 디펜던시 추가&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;snippetsDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'build/generated-snippets'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippetsDir&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//outputDir 작성&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;useJUnitPlatform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// asciidoctor 설정&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;asciidoctor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// test 작업 이후에 작동하도록 하는 설정&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'asciidoctorExtensions'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 위에서 작성한 configuration 적용&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippetsDir&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// snippetsDir 를 입력으로 구성&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// source가 없으면 .adoc파일을 전부 html로 만들어버림&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// source 지정시 특정 adoc만 HTML로 만든다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/index.adoc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;**/common/*.adoc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 개별 adoc으로 운영한다면 필요 없는 옵션입니다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baseDirFollowsSourceFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// asciidoctor가 실행될 때 static/docs 폴더 비우기&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;asciidoctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/main/resources/static/docs'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copyDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asciidoctor&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build/docs/asciidoc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/main/resources/static/docs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// build 시 codyDocument 실행&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyDocument&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//build의 bootJar 시 asciidoctor에 의존하여 /static/docs에 index.html이 생성된다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bootJar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asciidoctor&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${asciidoctor.outputDir}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'static/docs'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@AutoConfigureRestDocs&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//추가&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        
        
        &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UUID&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;phone&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;전화번호&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nickname&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;닉네임&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이메일&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pushToken&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;푸시 토큰&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tired&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;피로도&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sendable&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;푸시 전송 가능 여부&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;joinDate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;회원 가입일&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastModifiedDate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;마지막 수정일&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastSignInDate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;마지막 로그인 날짜&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buddies&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;버디&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Test의  AndDo에 document 뱉는 코드 작성&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;RestDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;회원가입&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rqSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpleRequestFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                                        &lt;span class=&quot;s&quot;&gt;&quot;phone&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;전화번호&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;비밀번호&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;s&quot;&gt;&quot;nickname&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;닉네임&quot;&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rsSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RestDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;simpleResponseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

                &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//반복된 코드 정리한 class&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestDocument&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestFieldsSnippet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simpleRequestFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;linkedRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PayloadDocumentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subsectionWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;relaxedRequestFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkedRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseFieldsSnippet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simpleResponseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;linkedResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PayloadDocumentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subsectionWithPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;relaxedResponseFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkedResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FieldDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestFieldsSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rqSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseFieldsSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PathParametersSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestPartFieldsSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestHeadersSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headersSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rqSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RequestFieldsSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rqSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rqSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rqSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rsSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResponseFieldsSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rsSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pathSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PathParametersSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pathSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RequestPartFieldsSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;partSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;headersSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RequestHeadersSnippet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headersSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;headersSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headersSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OperationRequestPreprocessor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simplePreProcessRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;preprocessRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;modifyUris&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;docs.api.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removePort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OperationResponsePreprocessor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simplePreProcessResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preprocessResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simpleSnippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rqSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rqSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headersSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headersSnippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestDocumentationResultHandler&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;simplePreProcessRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;simplePreProcessResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;simpleSnippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[참고 : 우아한 기술블로그] (https://techblog.woowahan.com/2597/)&lt;/p&gt;

&lt;h1 id=&quot;restdoc-1&quot;&gt;restDoc&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requestFields&lt;/code&gt; : 요청 값 -&amp;gt; 필드 전체 체크
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subsectionWithPath&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fieldWithPath&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relaxedRequestFields&lt;/code&gt;: 요청 값 -&amp;gt; 필드 전체 체크 없음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responseFields&lt;/code&gt; : 응답 값 -&amp;gt; 필드 전체 체크
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subsectionWithPath&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fieldWithPath&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relaxedResponseFields&lt;/code&gt; : 응답 값 -&amp;gt; 필드 전체 체크 없음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathParameters&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathParameters&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requestHeaders&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headerWithName&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://velog.io/@dhfl0710/Spring-RestDocs-문서화&quot;&gt;참고 velog&lt;/a&gt;
&lt;a href=&quot;https://jogeum.net/16&quot;&gt;참고 blog&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Aug 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[spring Series] 29.validated</title>
        <link>/spring/2024/08/04/Spring-series-29.Validated.html</link>
        <guid isPermaLink="true">/spring/2024/08/04/Spring-series-29.Validated.html</guid>
        <description>&lt;h1 id=&quot;validated&quot;&gt;Validated&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Valid, @Validated 어노테이션으로 validation을 하던 도중 겪은 일화&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Spring에서 Controller 단에서 ArgumentResolver로 넘어올 때 JSR380(Validation)을 통해서
넘어오는 파라미터에 대해서 validation이 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDto&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtEncryptable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;로그아웃 시 UUID는 필수입니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SignOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;전화번호는 필수입니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SignUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;비밀번호는 필수입니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SignUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;닉네임은 필수입니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SignUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//markingInterface&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추가로 Spring에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.springframework.validation.annotation.Validated&lt;/code&gt;로 참조 구현이 되어있었다. 이 스펙은 스프링에 특화된 스펙이다.
다만 groups로 그룹별로 validation을 나눠서 할 수 있었다.&lt;/p&gt;

&lt;p&gt;스프링 2.xx에서는&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//controller&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/sign/up&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Validated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SignUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Valid(JSR380)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Validated(Spring)&lt;/code&gt;과 함께 작성해도 spring의 Validated가 작동했었다. (이렇게 썼던게 안일했던거다.)
spring6, 3.x가 되면서 병기하면 group을 못잡고, default만 작동하는 일이 벌어졌다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//controller&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/sign/up&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Validated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SignUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Valid&lt;/code&gt;를 제외한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Validated&lt;/code&gt;만 작성하면 원래 알던대로 작동한다.&lt;/p&gt;

</description>
        <pubDate>Sun, 04 Aug 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[mysql Summary Series] 10.online_ddl</title>
        <link>/2024/08/01/mysql-summary-series-10.ONLINE_DDL.html</link>
        <guid isPermaLink="true">/2024/08/01/mysql-summary-series-10.ONLINE_DDL.html</guid>
        <description>&lt;h1 id=&quot;online_ddl&quot;&gt;ONLINE_DDL&lt;/h1&gt;

&lt;p&gt;온라인에서 스키마 변경은 주저할만한 일이 맞지만, 일단 ALGORITHM, LOCK 옵션으로 어떤 모드로 스키마 변경을 진행할지 결정할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ALGORITH=INSTANT : 테이블 데이터 변경 없이 메타데이터만 변경하고 작업을 완료한다. 테이블 읽고 쓰기는 대기하지만 스키마 변경 시간이 매우 짧이서 문제가 되지 않을 수준이다.&lt;/li&gt;
  &lt;li&gt;ALGORITH=INPLACE : 임시테이블로 데이터로 복사하고 스키마를 변경한다. 필요에 따라 테이블 리빌드가 필요할 수도 있다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ALGORITH=COPY : 변경된 스키마를 적용한 임시 테이블을 생성하고, 레코드를 모두 복사하고 임시테이블을 RENAME 해서 스키마 변경을 완료한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;LOCK=NONE   : 아무런 잠금을 걸지 않음&lt;/li&gt;
  &lt;li&gt;LOCK=SHARED : 읽기 잠금을 건다. (읽기는 가능, 쓰기는 불가)&lt;/li&gt;
  &lt;li&gt;EXCLUSIVE   : 쓰기 잠금을 건다. (읽기, 쓰기 불가)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;inplace&quot;&gt;INPLACE&lt;/h2&gt;
&lt;p&gt;임시테이블로 레코드를 복사하지 않더라도 내부적으로 테이블의 모든 레코드를 리빌드해야 하는 경우가 많다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;INPLACE로 변경 지원되는 엔진인지 확인&lt;/li&gt;
  &lt;li&gt;스키마 변경 준비 (변경 동안 데이터 추적 준비)&lt;/li&gt;
  &lt;li&gt;변경 및 새로운 DML 로깅&lt;/li&gt;
  &lt;li&gt;로그 적용&lt;/li&gt;
  &lt;li&gt;INPLACE 종료&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;모니터링&quot;&gt;모니터링&lt;/h2&gt;
&lt;p&gt;ONLINE DDL을 포함한 ALTER TABLE 명령은 모두 performance_schema를 통해서 진행 상황을 모니터링할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;데이터베이스-관련-명령어&quot;&gt;데이터베이스 관련 명령어&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;SHOW DATABASES;&lt;/li&gt;
  &lt;li&gt;USE [dbName]&lt;/li&gt;
  &lt;li&gt;ALTER DATABASE [dbName] CHARACTER SET=’utf8mb4’;&lt;/li&gt;
  &lt;li&gt;DROP DATABASE [IF EXISTS] [dbName]&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;테이블-스페이스-변경&quot;&gt;테이블 스페이스 변경&lt;/h3&gt;
&lt;p&gt;MySQL은 전통적으로 테이블별 전용 테이블 스페이스를 사용했다. InnoDB 테이블 스페이스(ibdata1)만 제너럴 테이블스페이스(여러 테이블 데이터를 한꺼번에 저장하는 테이블스페이스)를 사용했다.
8.0부터는 제네럴테이블 스페이스로 사용자 테이블을 저장하는 기능이 추가됐다. 그러나 몇 가지 제약을 가지게 된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;파티션 테이블은 GeneralTableSpace를 사용하지 못한다.&lt;/li&gt;
  &lt;li&gt;복제소스, 레플리카 서버가 동일 호스트에서 실행되는 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD DATAFILE&lt;/code&gt; 사용 불가&lt;/li&gt;
  &lt;li&gt;테이블 암호화는 테이블 스페이스 단위로 설정&lt;/li&gt;
  &lt;li&gt;테이블 압축 가능 여부는 테이블스페이스의 블록 사이즈, InnoDB 페이지 사이즈에 의해서 결정됨&lt;/li&gt;
  &lt;li&gt;특정 테이블을 삭제해도 디스크 공간이 반납되지 않음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그럼에도&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;제네럴 테이블스페이스를 사용하면 파일 핸들러(Open file descriptor)를 최소화&lt;/li&gt;
  &lt;li&gt;테이블스페이스 관리에 필요한 메모리 공간을 최소화&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;테이블-구조-조회&quot;&gt;테이블 구조 조회&lt;/h3&gt;
&lt;p&gt;테이블 구조 조회는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW CREATE TABLE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DESC&lt;/code&gt;
로 두 가지가 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW CREATE TABLE&lt;/code&gt;는 최초 테이블 생성 때 사용한 내용을 그대로 보여주는 것은 아니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW CREATE TABLE&lt;/code&gt;는 컬럼명, 인덱스, FK 등을 동시에 보여준다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DESC&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DESCRIBE&lt;/code&gt;의 약어 형태의 명령으로 둘 모두 같은 결과를 보여준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;테이블-구조-변경&quot;&gt;테이블 구조 변경&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALTER TABLE&lt;/code&gt;은 테이블 자체의 속성을 변경할 수 있을뿐만 아니라 인덱스의 추가/삭제 컬럼 추가/삭제 용도로 사용된다.&lt;/p&gt;

&lt;h3 id=&quot;테이블명-변경&quot;&gt;테이블명 변경&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RENAME TABLE [A] TO [B]&lt;/code&gt;로 변경할 수 있다. 다른 DB로 테이블을 이동할 때도 사용할 수 있다. 스키마를 변경하지 않는다면 메타 정보만 변경하지만
스키마 이동을 하면 메타정보와 테이블이 저장된 파일까지 다른 디렉토리로 이동해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;테이블-상태-조회&quot;&gt;테이블 상태 조회&lt;/h3&gt;
&lt;p&gt;MySQL의 테이블은 만들어진 시간, 대략의 레코드 건수, 데이터 파일의 크기 등의 정보를 가지고 있다. 파일의 버전, 레코드 포맷 등과 같은 정보도 가지고 있다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW TABEL STATUS LIKE [tableName];&lt;/code&gt;로 조회할 수 있다. 혹은&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SELECT * FROM information_schema.TABLES
WHERE TABLE_SCHEMA='tableName' 
AND TABLE_NAME='tableName';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;로 조회할 수 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;information_schema&lt;/code&gt;에 스키마들에 대한 메타 정보를 가진 딕셔너리 테이블이 관리된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;information_schema&lt;/code&gt;는 실제 존재하는 테이블이 아니라.
메모리에 모아두고 참조할 수 있는 테이블이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DB 객체에 대한 메타 정보&lt;/li&gt;
  &lt;li&gt;테이블과 컬럼에 대한 간략한 통계정보&lt;/li&gt;
  &lt;li&gt;전문 검색 디버깅을 위한 뷰&lt;/li&gt;
  &lt;li&gt;압축 실행과 실패 횟수에 대한 집계 정보&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;테이블-구조-복사&quot;&gt;테이블 구조 복사&lt;/h3&gt;
&lt;p&gt;테이블 구조는 같지만 이름만 다른 테이블을 생성할 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW CREATE TABLE&lt;/code&gt;로 DDL을 조회하고 만들거나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE TABLE ... AS SELECT ... LIMIT 0&lt;/code&gt;으로 메타데이터만 긁어서 만들 수도 있다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE TABLE ... AS SELECT ... LIMIT 0&lt;/code&gt; 는 인덱스가 생성되지 않는다는 장점이 있다. 추가로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE TABLE ... LIKE ~&lt;/code&gt;를 사용하면 구조만 복사할 수도 있다.
데이터도 복사하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT ... SELECT&lt;/code&gt; 도 실행하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;테이블-삭제&quot;&gt;테이블 삭제&lt;/h3&gt;
&lt;p&gt;테이블 삭제는 파일 삭제를 수반한다. 만약 클러스터링 되어 있다면 읽고 쓰기 작업이 필요하다. ONLINE DDL 로 DELETE를 했는데 만약 용량이 큰 테이블이라면
쿼리 성능에 영향을 미칠 가능성이 높다. 추가로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdaptiveHashIndex&lt;/code&gt;를 사용했다면 이 인덱스도 모두 삭제해야 한다. 그러면 이 또한 서버에 부하를 주기 때문에
쿼리에 영향을 미친다.&lt;/p&gt;

&lt;h3 id=&quot;컬럼-변경&quot;&gt;컬럼 변경&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;추가 : 대부분 INPLACE 알고리즘을 사용한다. 맨 끝에 추가하면 INSTANT 알고리즘으로 추가된다.&lt;/li&gt;
  &lt;li&gt;삭제 : 항상 테이블 리빌드가 필요하다. INPLACE로만 가능하다.&lt;/li&gt;
  &lt;li&gt;변경 :
    &lt;ol&gt;
      &lt;li&gt;이름 : INPLACE를 사용하지만 리빌드는 필요 없다.&lt;/li&gt;
      &lt;li&gt;타입 :
        &lt;ol&gt;
          &lt;li&gt;타입만 변경 : COPY 알고리즘으로 진행한다.&lt;/li&gt;
          &lt;li&gt;길이만 변경 :&lt;/li&gt;
          &lt;li&gt;증가 : 확장하는 길이에 따라 리빌드가 필요할 수도 아닐 수도 있다.&lt;/li&gt;
          &lt;li&gt;축소 : COPY를 사용한다. 또한 스키마 변경 중 테이블 데이터 변경은 허용되지 않으므로 LOCK은 SHARED를 사용해야 한다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;인덱스-변경&quot;&gt;인덱스 변경&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;ALTER TABLE [tableName] ADD 
[PRIAMRY KEY|UNIQUE INDEX|INDEX|FULLTEXT|SPATIAL]
( columnName ) ALGORITHM=INPLACE, LOCK=NONE;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;인덱스-조회&quot;&gt;인덱스 조회&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW INDEXES&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW CREATE TABLE&lt;/code&gt;로 확인하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;show index from order;

| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| order | 0 | PRIMARY | 1 | orderNo | A | 51152 | null | null |  | BTREE |  |  |
| order | 1 | order_tblStore_storeNo_fk | 1 | storeNo | A | 512 | null | null | YES | BTREE |  |  |
| order | 1 | order_orderManageNumber | 1 | orderManageNo | A | 51194 | null | null | YES | BTREE |  |  |
| order | 1 | order_userNo | 1 | userNo | A | 6071 | null | null | YES | BTREE |  |  |
| order | 1 | order_orderState_payState_userNo | 1 | payStatus | A | 1 | null | null | YES | BTREE |  |  |
| order | 1 | order_orderState_payState_userNo | 2 | orderState | A | 7 | null | null | YES | BTREE |  |  |
| order | 1 | order_orderState_payState_userNo | 3 | userNo | A | 6767 | null | null | YES | BTREE |  |  |
| order | 1 | orderState_index | 1 | orderState | A | 6 | null | null | YES | BTREE |  |  |
| order | 1 | date_index | 1 | orderDate | A | 51194 | null | null | YES | BTREE |  |  |

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cardinality는 인덱스에서 유니크한 개수를 보여준다.&lt;/p&gt;

&lt;h3 id=&quot;인덱스-이름-변경&quot;&gt;인덱스 이름 변경&lt;/h3&gt;
&lt;p&gt;MySQL5.7부터 변경할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;
ALTER TABLE A salaries RENAME INDEX ix_salary TO ix_salary2,
ALGORITHM=INPLACE, LOCK=NONE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;INPLACE를 사용하지만 리빌드는 필요하지 않다.&lt;/p&gt;

&lt;h3 id=&quot;인덱스-가시성-변경&quot;&gt;인덱스 가시성 변경&lt;/h3&gt;
&lt;p&gt;인덱스 삭제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALTER TABLE DROP INDEX&lt;/code&gt;으로 완료된다. 그러나 인덱스 삭제, 생성은 리소스가 많이 든다.
그래서 단순히 옵티마이저가 사용하냐 안하냐 정도의 가시성 개념이 도입되었다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;ALTER TABLE A ALTER INDEX a INVISIBLE;
ALTER TABLE A ALTER INDEX a VISIBLE;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;인덱스-삭제&quot;&gt;인덱스 삭제&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALTER TABLE DROP INDEX&lt;/code&gt;로 해결된다. SecondaryIndex의 삭제는 이 인덱스 들의 PK 값을 삭제해야 하기 때문에 임시테이블로 레코드를 복사해서 
테이블을 재구축해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;프로세스-조회-및-강제-종료&quot;&gt;프로세스 조회 및 강제 종료&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SHOW PROCESSLIST;

| Id | User | Host | db | Command | Time | State | Info |
| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |
| 80548 | rdsadmin | localhost | mysql | Sleep | 13 |  | null |
| 80550 | rdsadmin | localhost | null | Sleep | 1 |  | null |

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Id      : MySQL 서버 쓰레드&lt;/li&gt;
  &lt;li&gt;User    : MySQL에 접속할 때 인증한 사용자 계정&lt;/li&gt;
  &lt;li&gt;Host    : 호스명이나 IP&lt;/li&gt;
  &lt;li&gt;db      : 클라이언트가 기본으로 사용하는 데이터베이스 이름이 표시된다.&lt;/li&gt;
  &lt;li&gt;Command : 처리하고 있는 작업&lt;/li&gt;
  &lt;li&gt;Time    : 실행 시간&lt;/li&gt;
  &lt;li&gt;State   : Command에 표시되는 내용의 큰 분류&lt;/li&gt;
  &lt;li&gt;Info    : 쓰레드가 실행 중인 쿼리 문장르 보여준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;활성-트랜잭션-조회&quot;&gt;활성 트랜잭션 조회&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;information_schema.innodb_trx&lt;/code&gt; 테이블을 통해 확인할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SELECT trx_id,
       (SELECT CONCAT(user, '@', host) FROM information_schema.processlist WHERE id = trx_mysql_thread_id) AS source_info,
       trx_state,
       ....,
FROM information_schema.innodb_trx
WHERE (unix_timestamp(now() - unix_timestamp(trx_started))) &amp;gt; 5

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;락은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;performance_schema.data._locks&lt;/code&gt; 테이블을 참조하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;쿼리-성능-테스트---쿼리-성능에-영향을-미치는-요소&quot;&gt;쿼리 성능 테스트 - 쿼리 성능에 영향을 미치는 요소&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;OS 캐시 : MySQL도 OS Call로 파일을 읽어온다. 그리고는 캐싱해 놓는데 만약 MySQL이 필요한 부분이 캐싱되어 있다면 여기에서 읽어온다.&lt;/li&gt;
  &lt;li&gt;BufferPool : MySQL도 Page 단위로 캐싱한다. 버퍼풀은 인덱스 페이지, 데이터 페이지 가릴거 없이 캐시하며, 쓰기 버퍼링도 겸한다. 한 번 시작하면 삭제 명령어가 없고, 설정에 따라 재시작하면 워밍업으로 이전의 데이터를 올리기도 한다.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 01 Aug 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[mysql Summary Series] 09.optimizingquery</title>
        <link>/2024/08/01/mysql-summary-series-09.OptimizingQuery.html</link>
        <guid isPermaLink="true">/2024/08/01/mysql-summary-series-09.OptimizingQuery.html</guid>
        <description>&lt;h1 id=&quot;쿼리-작성-및-최적화&quot;&gt;쿼리 작성 및 최적화&lt;/h1&gt;

&lt;h2 id=&quot;sql-모드&quot;&gt;SQL 모드&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;STRICT_ALL_TABLES &amp;amp; STRICT_TRANS_TABLES : INSERT, UPDATE 문장으로 데이터를 변경하는 경우 컬럼 타입과 저장되는 타입 다를 때 자동 캐스팅이 수행된다.&lt;/li&gt;
  &lt;li&gt;ANI_QUOTES : 홑따옴표만 문자열 값 표기로 사용할 수 있게 한다.&lt;/li&gt;
  &lt;li&gt;ONLY_FULL_GROUP_BY : GROUP BY 절에 포함되지 않은 컬럼이라도 집합함수 사용 없이 SELECT, HAVING에 사용할 수 없게 한다.&lt;/li&gt;
  &lt;li&gt;PIPE_AS_CONCAT : 오라클 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt;를 문자열 연결 연산자로 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;PAD_CHAR_TO_FULL_LENGTH : CHAR 타입을 가져올 때 뒤쪽에 공백이 제거되지 않고 반환돼야 한다면 설정을 하면된다.&lt;/li&gt;
  &lt;li&gt;NO_BACKSLASH_ESCAPE : ON으로 두면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'\'&lt;/code&gt;를 이용해서 이스케이핑 할 수 없어진다.&lt;/li&gt;
  &lt;li&gt;IGNORE_SPACE : 프로시저나 함수의 이름 뒤에 공백 구분이 되는데, 이를 무시할지를 조절한다.&lt;/li&gt;
  &lt;li&gt;REAL_AS_FLOAT : 부동 소수점으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLOAT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DOULBE&lt;/code&gt;이 지원되는데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REAL&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DOUBLE&lt;/code&gt;의 동의어로 간주된다. 만약 설정을 켜놓으면 FLOAT의 동의어가 된다.&lt;/li&gt;
  &lt;li&gt;NO_ZERO_IN_DATE&amp;amp;NO_ZERO_DATE : ‘2020-00-00’ 같은 비정상적 날짜 저장이 불가능해진다.&lt;/li&gt;
  &lt;li&gt;ANSI : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REAL_AS_FLOAT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIPES_AS_CONCAT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANSI_QUOTES&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGNORE_SPACE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ONLY_FULL_GROUP_BY&lt;/code&gt; 조합&lt;/li&gt;
  &lt;li&gt;TRADITIONAL : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRICT_TRANS_TABLE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRICT_ALL_TABLES&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NO_ZERO_IN_DATE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NO_ZERO_DATE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERROR_FOR_DIVISION_BY_ZERO&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NO_ENGINE_SUBTITUTION&lt;/code&gt; 조합&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;연산자-내장함수&quot;&gt;연산자, 내장함수&lt;/h2&gt;

&lt;h3 id=&quot;1-연산자&quot;&gt;1. 연산자&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;REGEXP : 정규표현식 연산자다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLIKE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REGEXP&lt;/code&gt;로 사용한다. 인덱스 사용 불가하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SELECT 'abc' REGEXP '^[x-z]';
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;LIKE : 문자열 패턴 비교 연산자이다. 인덱스를 이용해서 처리할 수 있다.&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE a LIKE '%~'&lt;/code&gt; 같은 좌측에 와일드카드를 사용하지 않는다면 말이다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; : 0 또는 1개 이상 모든 문자&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; : 정확히 1개 문자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;BETWEEN : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loe&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lte&lt;/code&gt;이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IN&lt;/code&gt;과 다르다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;IN : 여러 개의 값에 동등 비교 연산을 모아 놓은 것으로 생각하면 된다. ( &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT IN&lt;/code&gt;은 전체를 긁고 IN에 걸리는 걸 빼내야 하기에 인덱스 풀 스캔으로 표시된다. 가끔 PK와 비교될 때는 레인지 스캔이 되는 경우도 있다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-내장함수&quot;&gt;2. 내장함수&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IS NULL&lt;/code&gt;/ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF NULL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOW&lt;/code&gt;/ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYSDATE&lt;/code&gt; : NOW는 항상 같은 값을 가지지만 SYSDATE는 호출 시점에 따라 결과 값이 달라진다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATE_FORMAT&lt;/code&gt;/ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STR_TO_DATE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATE_ADD&lt;/code&gt;/ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATE_SUB&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNIX_TIMESTAMP&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM_UNIXTIME&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPAD&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LPAD&lt;/code&gt;/ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTRIM&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LTRIM&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TRIM&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONCAT&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP_CONCAT&lt;/code&gt; : 컬럼 연결을 위해서 메모리 버퍼 공간을 사용한다. 버퍼 크기는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group_concat_max_len&lt;/code&gt;으로 조정할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASE WHEN ... THEN ...END&lt;/code&gt; : switch_case와 같다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAST&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONVERT&lt;/code&gt; : 보통 알아서 변환해주지만 명시적으로 변환할 때 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SLEEP&lt;/code&gt; : 디버깅 용도로 잠시 대기하거나 쿼리 실행 시간을 오래 유지하고자 할 때 유용한 함수다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_PRETTY&lt;/code&gt; : JSON을 읽기 쉽게 출력해준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_STORAGE_SIZE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_EXTRACT&lt;/code&gt; : JSON의 특정 필드의 값을 가져올 수 있다. ex) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_EXTRACT(doc, &quot;$.first_name&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_CONTAINS&lt;/code&gt;: JSON에서 특정 필드 포함 여부를 확인할 수 있다. ex) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_CONTAINS(doc, '{&quot;first_name&quot;:&quot;name&quot;}')&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_OBJECTAGG&lt;/code&gt;/ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_ARRAYAGG&lt;/code&gt; : JSON Obj, Array로 집계&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON_TABLE&lt;/code&gt; : JSON 데이터 값을 모아서 Table로 반환&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;조회문&quot;&gt;조회문&lt;/h2&gt;

&lt;h3 id=&quot;3-select&quot;&gt;3. SELECT&lt;/h3&gt;
&lt;p&gt;SELECT의 처리 순서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HAVING&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIMIT&lt;/code&gt; 순으로 처리된다.&lt;/p&gt;

&lt;h3 id=&quot;4-where-group-by-order-by&quot;&gt;4. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&quot;1-인덱스를-사용하기-위한-규칙&quot;&gt;1. 인덱스를 사용하기 위한 규칙&lt;/h4&gt;
&lt;p&gt;기본적으로 인덱스된 컬럼 값 자체를 변환하지 않고 그래도 사용한다는 조건을 충족해야만 한다.&lt;/p&gt;

&lt;h4 id=&quot;2-where-인덱스-사용&quot;&gt;2. WHERE 인덱스 사용&lt;/h4&gt;
&lt;p&gt;WHERE 에서 나열된 조건 순서는 실제 인덱스 사용 여부와 무관하다. 옵티마이저가 사용할 수 있는 조건들을 뽑아서 최적화를 수행한다. 8.0 이전까지는 하나의 인덱스를
구성하는 각 컬럼의 순서가 혼합되어 있으면 사용할 수 없었다. 이후부터는 가능해졌다. 또한 일부 조건에서 인덱스 레인지 스캔을 사용할 수 있더라도 다른 조건에서 풀스캔이 필요하면
결국 그냥 풀스캔 한 번으로 처리하는 식으로 실행 계획을 정리하기도 한다.&lt;/p&gt;

&lt;h4 id=&quot;3-group-by-인덱스-사용&quot;&gt;3. GROUP BY 인덱스 사용&lt;/h4&gt;
&lt;p&gt;GROUP BY에 명시된 컬럼의 순서가 인덱스를 구성하는 컬럼의 순서와 같으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt;에서 인덱스를 사용할 수 있다. 풀어서 기술하면&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;GROUP BY에 명시된 인덱스 컬럼 순서와 위치가 같아야 한다.&lt;/li&gt;
  &lt;li&gt;인덱스를 구성하는 컬럼 중에서 앞 쪽에 있는 값이 GROUP BY에 명시되지 않으면 인덱스를 사용할 수 없다.&lt;/li&gt;
  &lt;li&gt;WHERE 와 달리, GROUP BY에 명시될 컬럼이 하나라도 인덱스에 없으면 인덱스를 사용할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-order-by-인덱스-사용&quot;&gt;4. ORDER BY 인덱스 사용&lt;/h4&gt;
&lt;p&gt;GROUP BY 요건과 흡사하다.&lt;/p&gt;

&lt;h4 id=&quot;5-where-조건과-order-by혹은-group-by-에서-인덱스-사용&quot;&gt;5. WHERE 조건과 ORDER BY(혹은 GROUP BY) 에서 인덱스 사용&lt;/h4&gt;
&lt;p&gt;WHERE, ORDER BY(GROUP BY)이 같이 사용된 경우는 아래 세 가지 방법 중 한 방법으로만 인덱스를 사용한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;WHERE, ORDER BY 절이 동시에 같은 인덱스를 사용&lt;/li&gt;
  &lt;li&gt;WHERE에만 인덱스 사용 : 인덱스로 레코드를 뽑고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using Filesort&lt;/code&gt;한다.&lt;/li&gt;
  &lt;li&gt;ORDER BY에만 인덱스 사용 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt; 절 순서대로 읽고 필터링한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;6-group-by-order-by-인덱스-사용&quot;&gt;6. GROUP BY, ORDER BY 인덱스 사용&lt;/h4&gt;
&lt;p&gt;둘 다 하나의 인덱스를 사용해서 처리되려면 ORDER BY, GROUP BY에 명시된 컬럼의 순서와 내용이 모두 같아야 한다. 그렇지 않으면 둘 중 하나는 동시에 인덱스를 사용하지 못한다.&lt;/p&gt;

&lt;h3 id=&quot;5-where-비교-조건-사용-시-주의사항&quot;&gt;5. WHERE 비교 조건 사용 시 주의사항&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;NULL 비교 : NULL도 인덱스로 관리된다.&lt;/li&gt;
  &lt;li&gt;문자열 숫자 비교 : 컬럼 타입에 맞지 않은 값으로 비교 연산을 하면 인덱스를 사용하지 못한다.&lt;/li&gt;
  &lt;li&gt;날짜 비교 :
    &lt;ul&gt;
      &lt;li&gt;문자열을 비교하면 자동으로 DATETIME 값으로 변환해서 비교한다.&lt;/li&gt;
      &lt;li&gt;DATE, DATETIME 끼리 비교하면 DATETIME으로 맞춘다.&lt;/li&gt;
      &lt;li&gt;DATETIME, TIMESTAMP의 경우(내부적으로 숫자 값이다.) DATETIME을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNIX_TIMESTAMP()&lt;/code&gt;로 변환해서 비교해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Short-Circuit Evaluation : WHERE 도 단축평가를 한다. 물론 인덱스를 사용할 수 있는 조건이 있다면 단축 평가 전에 인덱스를 우선적으로 사용한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;6-limit&quot;&gt;6. LIMIT&lt;/h3&gt;
&lt;p&gt;지정된 순서에 위치한 레코드만 가져오고자 할 때 사용한다. LIMIT은 필요한 레코드 건수만 준비되면 즉시 쿼리를 종료한다.  LIMIT 0의 경우 결과값의 메타 정보만 반환한다&lt;/p&gt;

&lt;h3 id=&quot;7-count&quot;&gt;7. COUNT&lt;/h3&gt;
&lt;p&gt;COUNT(*)의  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;는 레코드 전체가 아니라 PK를 사용한다. WHERE 조건이 없다면 레코드를 하나씩 셀 필요가 없어서 바로 반환한다. 
그러나 WHERE이 있다면 레코드를 읽어야 한다. COUNT는 테이블이 커질수록 리소스가 큰 작업이 된다.&lt;/p&gt;

&lt;h3 id=&quot;8-join&quot;&gt;8. JOIN&lt;/h3&gt;
&lt;p&gt;Join 순서는 인덱스 여부와 테이블 크기에 영향을 받는다. 인덱스 레인지 스캔은 인덱스 탐색, 인덱스 스캔으로 구분해 볼 수 있다. 인덱스 스캔은 비교적 부하가 적지만
인덱스 탐색은 부하가 높다. JOIN은 driven에서는 인덱스 탐색, 스캔 작업을 driving의 레코드 건수만큼 반복한다. 이런 배경 지식을 바탕으로 케이스를 정리해보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;둘 다 인덱스가 있다면 : 인덱스가 있기 때문에 인덱스를 태워스 탐색, 스캔이 가능하다. 통계 정보를 이용해서 레코드 건 수가 적은 테이블을 driving으로 둔다.&lt;/li&gt;
  &lt;li&gt;한 쪽만 있는 경우 : 인덱스를 태우지 못하면 굉장히 느려진다. 그래서 인덱스가 없는 테이블을 driving으로 둔다.&lt;/li&gt;
  &lt;li&gt;둘 다 없는 경우 : 어차피 full scan이 발생한다. 레코드 건수가 적은 테이블을 driving으로 두는 것이 그나마 효율적이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;join-index와-관련된-주의점&quot;&gt;join, index와 관련된 주의점&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;컬럼 간에 타입이 일치하지 않으면 인덱스를 효율적으로 이용할 수 없다. 이 경우 최악으로는 두 테이블 모두 풀스캔을 하고 조인버퍼에 두고 하나씩 조립할 수도 있다.&lt;/li&gt;
  &lt;li&gt;collation이 달라도 인덱스를 이용할 수 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;join-outer-join에서-주의점&quot;&gt;join, OUTER JOIN에서 주의점&lt;/h4&gt;
&lt;p&gt;OUTER로 JOIN 되는 테이블을 driving으로 선택하지 못한다. 이러면 쿼리 성능이 떨어지는 실행 계획을 선택할 가능성이 생긴다. 당연히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OUTER JOIN&lt;/code&gt;이 필요하면
쓰는게 맞지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INNER JOIN&lt;/code&gt;을 사용할 수 있는 JOIN을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OUTER JOIN&lt;/code&gt;으로 사용하면 최적화의 기회를 배제하게 된다.&lt;/p&gt;

&lt;h4 id=&quot;join-foreign-key&quot;&gt;join, FOREIGN KEY&lt;/h4&gt;
&lt;p&gt;외래키는 JOIN과 연관이 없다. 그저 참조 무결성을 지키기 위함이다.&lt;/p&gt;

&lt;h4 id=&quot;지연된-join&quot;&gt;지연된 JOIN&lt;/h4&gt;
&lt;p&gt;JOIN에 GROUP BY나 ORDER BY가 있고, 다 인덱스를 태울 수 있다면 그 상태만으로 최적이겠지만 그렇지 않다면 생각해보면 JOIN 후에 GROUP BY, ORDER BY를 처리할 것이다.
이러면 처리할 일이 늘어날 것이다.  JOIN을 했으니 레코드가 늘어났을 수 있기 때문이다. 그래서 옵티마이저는 순서를 바꿔서 GROUP BY, ORDER BY를 먼저 할 수 있다면
처리하고 이후 JOIN을 하는 식으로 최적화를 하기도 한다. 이 판단은 통계와 테이블 상황을 종합해서 내린 결과다.&lt;/p&gt;

&lt;p&gt;그러나 항상 이런 최적화가 가능한건 아니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;LEFT JOIN인 경우 driving과 driven이 1:1 혹은 M:1일 때 가능하다.&lt;/li&gt;
  &lt;li&gt;INNER JOIN이라면 driving, driven이 1:1 혹은 M:1이고 driving 테이블에 있는 레코드는 driven에 모두 존재할 때 가능하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;lateral-join&quot;&gt;LATERAL JOIN&lt;/h4&gt;
&lt;p&gt;8.0부터 래터럴 조인을 이용해서 특정 그룹별로 서브쿼리를 실행해서 그 결과와 조인하는 것이 가능해졌다. 예를 들어 아래 쿼리를 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SELECT *
FROM employee e 
LEFT JOIN LATERAL (
        SELECT *
        FROM salaries s 
        WHERE s.emp_no=e.emp_no
        ORDER BY s.from_date DESC LIMIT 2
    ) s2 
ON s2.emp_no=e.emp_no
WHERE e.first_name=`MATT`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이러면 서브쿼리는 JOIN 순서상 후순위로 밀리고, 외부 쿼리의 결과 레코드 단위로 임시 테이블이 생성된다. 그래서 필요한 경우에만 사용해야 한다.&lt;/p&gt;

&lt;h4 id=&quot;join-정렬-흐트러짐&quot;&gt;join, 정렬 흐트러짐&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nested-loop JOIN&lt;/code&gt;은 driving 테이블따라서 순서가 유지된다. 만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash JOIN&lt;/code&gt;이 사용되면 이 순서가 틀어질 수 있다. 따라서 이럴 가능성이 있으므로
필요하다면 ORDER BY를 명시하는 것이 좋을 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;9-group-by&quot;&gt;9. GROUP BY&lt;/h3&gt;
&lt;p&gt;특정 컬럼으로 레코드를 그루핑하고, 그룹별로 집계된 결과를 하나의 레코드로 조회할 때 사용한다.&lt;/p&gt;

&lt;h3 id=&quot;10-order-by&quot;&gt;10. ORDER BY&lt;/h3&gt;
&lt;p&gt;어떤 순서로 정렬할지 결정한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스를 사용한 SELECT라면 인덱스에 정렬된 순서대로 레코드를 가져온다.&lt;/li&gt;
  &lt;li&gt;인덱스를 사용하지 못한다면 PK를 기준으로 정렬해서 가져온다.&lt;/li&gt;
  &lt;li&gt;SELECT가 임시 테이블을 거치면 순서 예측이 어렵다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;인덱스-사용이-불가하다면&quot;&gt;인덱스 사용이 불가하다면&lt;/h4&gt;
&lt;p&gt;실행 계획에 Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using filesort&lt;/code&gt;가 출력된다. MySQL 서버가 명시적으로 정렬 알고리즘을 수행했다는 의미가 된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW STATUS LIKE 'Sort_%'&lt;/code&gt;로 조회해서
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sort_merge_passes&lt;/code&gt; 상태를 보면 0보다 크면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort_buffer_size&lt;/code&gt;보다 정렬할 레코드가 커서 디스크를 거쳤다는 것을 의미한다.&lt;/p&gt;

&lt;h4 id=&quot;함수-표현식을-이용한-정렬&quot;&gt;함수, 표현식을 이용한 정렬&lt;/h4&gt;
&lt;p&gt;8.0 이후에는 함수 기반의 인덱스를 지원하기 시작했다.&lt;/p&gt;

&lt;h3 id=&quot;11-subquery&quot;&gt;11. SUBQUERY&lt;/h3&gt;
&lt;p&gt;서브쿼리는 SELECT, FROM, WHERE에 사용할 수 있다. 사용 위치에 따라 쿼리 수행에 미치는 성능 영향도, 최적화 방향이 달라진다.&lt;/p&gt;

&lt;h4 id=&quot;select-절에서-서브쿼리&quot;&gt;SELECT 절에서 서브쿼리&lt;/h4&gt;
&lt;p&gt;SELECT에서 사용한 서브쿼리는 서브쿼리가 인덱스를 적절히 사용한다면 문제는 없다. 굳이 생각할 것은 서브쿼리보다 조인이 더 빠르기 때문에 조인으로 재작성할 수 있다면
하는 것이 좋다.&lt;/p&gt;

&lt;h4 id=&quot;from-절에서-서브쿼리&quot;&gt;FROM 절에서 서브쿼리&lt;/h4&gt;
&lt;p&gt;FROM에서 서브쿼리가 사용하면 항상 서브쿼리의 결과를 임시테이블에 저장하고 필요할 때 그 임시 테이블을 읽는 방식으로 처리된다. 이를 튜닝하면 외부로 끌어내는 방식으로 진행할 수 있다.
다행히 5.7이후 부터는 FROM 절 서브쿼리 튜닝을 이렇게 한다. 그러나 아래의 경우는 이런식의 최적화가 불가능하기도 하다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;집합 함수 (SUM, MIN, MAX, COUNT) 사용&lt;/li&gt;
  &lt;li&gt;DISTINCT&lt;/li&gt;
  &lt;li&gt;GROUP BY, HAVING&lt;/li&gt;
  &lt;li&gt;LIMIT&lt;/li&gt;
  &lt;li&gt;UNION&lt;/li&gt;
  &lt;li&gt;SELECT에 SUBQUERY 사용&lt;/li&gt;
  &lt;li&gt;사용자 변수 사용&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;where-절에서-서브쿼리&quot;&gt;WHERE 절에서 서브쿼리&lt;/h4&gt;
&lt;p&gt;WHERE 절의 서브쿼리는 SELECT, FROM 보다는 다양한 형태로 사용될 수 있다. 크게 3가지로 구분할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;동등, 대소 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;= (SUBQUERY)&lt;/code&gt;)
5.5 이전에는 풀스캔이 잦았다. 이후로는 서브쿼리 결과를 상수로 변환하고 실행 계획을 수립한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IN (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IN (SUBQUERY)&lt;/code&gt;)
테이블 레코드가 다른 레코드를 이용한 표현식과 일치하는지를 체크하는 세미 조인의 형태다. 이 경우 5개의 최적화 전략을 선택적으로 사용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;table pull-out&lt;/strong&gt;
   세미 조인의 서브쿼리에 사용된 테이블을 아우터 쿼리로 빼내고 조인으로 재작성하는 형태의 최적화이다. Table pullout은 Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using table pullout&lt;/code&gt;이 출력되지는 않는다.
   대신 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW WARNINGS&lt;/code&gt;로 재작성한 쿼리를 확인하는 것으로 알 수 있다.
    &lt;ul&gt;
      &lt;li&gt;세미 조인 서브쿼리에만 사용 가능&lt;/li&gt;
      &lt;li&gt;서브 쿼리 부분이 UNIQUE 인덱스, PK 룩업으로 결과가 1건인 경우에만 사용 가능&lt;/li&gt;
      &lt;li&gt;만약 서브쿼리의 모든 테이블을 아우터로 빼낼 수 있다면 서브쿼리는 사라진다.&lt;/li&gt;
      &lt;li&gt;table pullout은 서브쿼리는 조인으로 바꿀 수 있다면 바꾸라는 가이드를 그대로 따르는 최적화 방법이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;firstMath&lt;/strong&gt;       &lt;br /&gt;
IN 형태의 세미 조인을 EXISTS(subquery) 형태로 튜닝한 것과 비슷한 방법으로 실행된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FirstMatch([tableName])&lt;/code&gt;이라는 문구가 출력된다.
    &lt;ol&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;여러 테이블이 조인되는 경우 원래 쿼리에는 없던 동등 조건을 옵티마이저가 자동으로 추가하는 형태의 최적화가 실행되기도 한다. FirstMatch는 조인 형태로 처리되기
때문에 서브쿼리 뿐만 아니라 아우터 쿼리의 테이블까지 전파될 수 있다.&lt;/li&gt;
          &lt;li&gt;FirstMatch는 서브 쿼리의 모든 테이블에서 FirstMatch를 수행할지 아니면 일부 테이블에 대해서만 수행할지 취사 선택할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;제한 사항 및 특징
        &lt;ul&gt;
          &lt;li&gt;FirstMatch는 단축실행경로(ShortCutPath)이기 때문에 FirstMatch 최적화에서 서브 쿼리는 그 서브쿼리가 참조하는 모든 아우터 테이블이 먼저 조회된 이후에 실행된다.&lt;/li&gt;
          &lt;li&gt;Extra에 FirstMatch(table-N)이 표시된다.&lt;/li&gt;
          &lt;li&gt;상관 서브 쿼리(Correlated Subquery)에서도 사용될 수 있다.&lt;/li&gt;
          &lt;li&gt;GroupBY나 집합 함수가 사용된 서브쿼리의 최적화에는 사용될 수 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;looseScan&lt;/strong&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using index for group-by&lt;/code&gt;의 루스 인덱스 스캔과 비슷한 읽기 방식을 사용한다. Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LooseScan&lt;/code&gt;이라는 문구가 표시된다.
    &lt;ul&gt;
      &lt;li&gt;LooseScan은 서브쿼리 테이블을 looseScan으로 읽고 아우터 테이블을 드리븐으로 사용해서 조인을 수행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;materialization&lt;/strong&gt;
세미 조인에 사용된 서브쿼리를 통쨰로 구체화해서 쿼리를 최적화한다. 즉, 내부 임시 테이블을 생성한다는 것을 의미한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select_type&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MATERIALIZED&lt;/code&gt;를 표기한다.
Materialization에도 몇 가지 제한 사항과 특징이 있다.
    &lt;ul&gt;
      &lt;li&gt;IN(subquery)에서 서브쿼리는 상관 쿼리가 아니어야 한다. (상관 쿼리란 부모-자신 간의 일정 관계를 맺는 경우를 의미한다.)&lt;/li&gt;
      &lt;li&gt;서브 쿼리는 GROUP BY, 집합 함수들이 사용되도 구체화가 가능하다.&lt;/li&gt;
      &lt;li&gt;구체화가 되면 내부 임시 테이블을 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;duplicated weed-out&lt;/strong&gt;
세미조인 서브쿼리를 일반적인 INNER JOIN으로 바꾸고 마지막에 중복된 레코드를 제거하는 방법으로 처리하는 최적화 알고리즘이다. 실제로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duplicate Weedout&lt;/code&gt;
은 INNER JOIN + GROUP BY 절로 바꿔서 실행하는 것과 동일한 작업으로 쿼리를 처리한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duplicate Weedout&lt;/code&gt;이라는 문구가 별도 표기되지는 않지만
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start temporary&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;End temporary&lt;/code&gt;가 표기된다. JOIN, 저장 하는 과정에서 발생하는 일이다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;상관 서브쿼리라고 해도 할 수 있는 최적화다.&lt;/li&gt;
      &lt;li&gt;GROUP BY나 집합 함수가 사용된 경우 불가능하다.&lt;/li&gt;
      &lt;li&gt;Duplicate Weedout은 서브쿼리의 테이블을 조인으로 처리하기 때문에 최적화할 수 있는 방법이 많다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NOT IN (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT IN (SUBQUERY)&lt;/code&gt;)
이 경우를 안티 세미 조인은 최적화할 방법이 그리 많지 않다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;NOT EXISTS&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;materialization&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;잠금을-하는-select&quot;&gt;잠금을 하는 SELECT&lt;/h3&gt;
&lt;p&gt;보통은 SELECT에 락을 걸지 않지만 이는 잠금 없는 읽기(Non Locking Consistent Read)라고 한다. 하지만 SELECT한 결과를 바탕으로 업데이트를 할 수도 있다. 
이 때는 다른 트랜잭션이 이 컬럼을 수정하지 못하게 해야 할 필요가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SELECT … FOR SHARE ( 읽기 잠금 ) : 레코드에 공유 잠금을 건다 다른 세션 해당 레코드를 변경하지 못하게 한다.&lt;/li&gt;
  &lt;li&gt;SELECT … FOR UPDATE ( 쓰기 잠금 ) : 배타 잠금 레코드 변경, 읽기도 수행하지 못하게 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;ShareLock&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;다른 트랜잭션이 잠긴 객체를 읽고 공유락 생성은 허용, 쓰기 및 배타락은 허용하지 않음&lt;/li&gt;
    &lt;li&gt;다른 트랜잭션이 읽는 곳은 읽을 수 없다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;ExclusiveLock&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;동일 행에 다른 트랜잭션을 생성하지 못하게 한다.&lt;/li&gt;
    &lt;li&gt;공유, 배타락 모두 생성 불가.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;nowait--skip-locked&quot;&gt;NOWAIT &amp;amp; SKIP LOCKED&lt;/h4&gt;
&lt;p&gt;8.0부터 추가됐다. 누군가 레코드를 잠그면 원래는 기다렸다. 해제될 때까지 말이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT FOR UPDATE&lt;/code&gt; 마지막에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOWAIT&lt;/code&gt;을 추가하면 잠긴 레코드에 접근하는
쿼리를 즉시 종료시켜버린다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SKIP LOCKED&lt;/code&gt;는 다른 트랜잭션에 의해서 잠긴 레코드는 에러 없이 무시하고 다음 레코드로 넘어가게 한다.&lt;/p&gt;

&lt;h2 id=&quot;삽입문&quot;&gt;삽입문&lt;/h2&gt;

&lt;h3 id=&quot;insert-ignore&quot;&gt;INSERT IGNORE&lt;/h3&gt;
&lt;p&gt;PK, UQ가 중복되거나 테이블 컬럼과 호환되지 않는 경우 모두 무시하고 다음 레코드를 처리할 수 있게 한다. Bulk로 INSERT 하는 경우 유용하다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;INSERT IGNORE INTO [table] ~
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;insert--on-duplicate-key-update&quot;&gt;INSERT … ON DUPLICATE KEY UPDATE&lt;/h3&gt;
&lt;p&gt;PK, UQ 인덱스 중복이 발생하면 UPDATE를 하게 해준다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;INSERT INTO ~
ON DUPLICATE KEY UPDATE 
~
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;load-data&quot;&gt;LOAD DATA&lt;/h3&gt;
&lt;p&gt;RDMBS에서 데이터 적재 방법으로 LOAD DATA가 있다. 내부적으로 MySQL 엔진, 스토리지 엔진 호출 횟수를 최소화하고 스토리지 엔진이 직접 적재하는 식으로 작동한다.
그래서 일반 INSERT보다 빠르다. 그러나 아래의 단점이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단일 쓰레드로 실행&lt;/li&gt;
  &lt;li&gt;단일 트랜잭션으로 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그래서 처리할 양이 많으면 단일 쓰레드라 느리고, 단일 트랜잭션이라 트랜잭션이 열려있는 동안 쌓이는 언두로그를 감안해야만 한다.&lt;/p&gt;

&lt;h3 id=&quot;bulk-insert-성능&quot;&gt;Bulk Insert 성능&lt;/h3&gt;
&lt;p&gt;INSERT 될 레코드들을 PK 기준으로 정렬해서 INSERT하면 성능에 도움이 될 수 있다. 정렬이 되어있지 않으면 INSERT 시마다 저장될 위치를 찾아야 한다.
또한 SecondaryIndex를 너무 많이 잡아도 느려진다. 물론 체인지 버퍼로 버퍼링하긴 하지만 당연히 백그라운드 작업도 부하를 유발하므로 성능이 떨어진다.&lt;/p&gt;

&lt;h3 id=&quot;pk-선정&quot;&gt;PK 선정&lt;/h3&gt;
&lt;p&gt;INSERT 성능을 결정한다. InnoDB는 클러스터링 키인데 저장 위치가 정해진다. 그래서 INSERT 위주 테이블이라면 단조 증가 패턴 값(AUTO_INCREMENT)을 선택하는게
좋고 SELECT 위주라면 클러스터링을 적극 활용할 수 있게 작성해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;auto_inc&quot;&gt;AUTO_INC&lt;/h3&gt;

&lt;p&gt;INSERT 최적화에 적합한 PK 선정 방식이다. 아래는 오로지 INSERT를 생각하면 내릴 수 있는 결정이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;단조 증감 PK 선정(클러스터링 효과를 받지 않기 위해서)&lt;/li&gt;
  &lt;li&gt;secondaryIndex 최소화&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;더 나아가 AUTO_INC를 할 때 잠금이 필요한데, 이를 AUTO_INC 잠금이라고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;innodb_autoinc_lock_mode = 0; : 항상 AUTO_INC 락을 걸고 한 번에 1씩 증가된 값을 가져온다.&lt;/li&gt;
  &lt;li&gt;innodb_autoinc_lock_mode = 1; : 단건 INSERT 는 MUTEX를 이용해서 가볍게 처리한다.&lt;/li&gt;
  &lt;li&gt;innodb_autoinc_lock_mode = 2; : LODA DATA, BULK INSERT에 AUTO_INC 락 사용하지 않는다. 채번이 증/감한다. 겹치지 않는다 정도만 보장한다.
채번된 번호가 연속될지는 보장하지 않는다.(Interleaved mode) -&amp;gt; replica에 치명적일 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;수정-삭제&quot;&gt;수정/ 삭제&lt;/h2&gt;

&lt;h3 id=&quot;update--order-by--limit-n&quot;&gt;UPDATE … ORDER BY … LIMIT n&lt;/h3&gt;
&lt;p&gt;ORDER BY, LIMIT으로 특정 컬럼으로 정렬해서 상위 n 건만 수정, 삭제할 수도 있다. 그러나 바이너리 로그(STATEMENT) 기반의 레플리케이션에서는 주의해야한다.&lt;/p&gt;

&lt;h3 id=&quot;join-update&quot;&gt;JOIN UPDATE&lt;/h3&gt;
&lt;p&gt;두 개 이상의 테이블을 JOIN해서 해당 레코드를 변경, 삭제할 수 있다. 한 테이블에 의존적으로 삭제, 수정할 때 용이하다. 변경되는 테이블은 쓰기 잠금, 참조되는 테이블은 읽기 잠금이 걸린다.
추가적으로 JOIN UPDATE에는 GROUP BY, ORDER BY가 불가하다. 이런 경우 SUBQUERY, DERIVED TABLE을 사용하는 것이 해법이다.
특히 JOIN 순서는 이 쿼리 속도에 영향을 미치기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRAIGHT_JOIN&lt;/code&gt; 등을 사용할 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;여러-레코드-update&quot;&gt;여러 레코드 UPDATE&lt;/h3&gt;
&lt;p&gt;한 번에 동일한 값으로 UPDATE 하는 건 쉽다. 그러나 각각 레코드 별로 다른 값으로 업데이트하는 건 8.0부터 가능하다. 레코드 생성(Row Constructor) 문법을 이용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_u&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ROW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ROW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userId&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INNER JOIN ( VALUES ROW(1, 1), ROW(2, 4) ) new_u (user_id, user_name)&lt;/code&gt; 이러면 임시테이블을 생성하는 효과를 낼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;join-delete&quot;&gt;JOIN DELETE&lt;/h3&gt;
&lt;p&gt;단일 DELETE와는 다른 형식의 쿼리를 작성해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept_emp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;departpents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emp_no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emp_no&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dept_no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dept_no&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dept_no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d001&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마찬가지로 STRAIGHT_JOIN, JOIN_ORDER 힌트로 조인 순서를 옵티마이저에 일러줄 수 있다.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Aug 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[programmers Series] Lv. 02 Nextlargenumber</title>
        <link>/programmers/2024/07/30/Programmers-series-LV.-02-NextLargeNumber.html</link>
        <guid isPermaLink="true">/programmers/2024/07/30/Programmers-series-LV.-02-NextLargeNumber.html</guid>
        <description>&lt;h1 id=&quot;뒤에-있는-큰-수-찾기&quot;&gt;뒤에 있는 큰 수 찾기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/154539&quot;&gt;Programmers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;pre&gt;
    정수로 이루어진 배열 numbers가 있습니다.
    배열 의 각 원소들에 대해 자신보다 뒤에 있는 숫자 중에서 자신보다 크면서
    가장 가까이 있는 수를 뒷 큰수라고 합니다.

     정수 배열 numbers가 매개변수로 주어질 때,
     모든 원소에 대한 뒷 큰수들을 차례로 담은 배열을 return 하도록
     solution 함수를 완성해주세요.
     단, 뒷 큰수가 존재하지 않는 원소는 -1을 담습니다.


     제한사항
- 4 ≤ numbers의 길이 ≤ 1,000,000
- 1 ≤ numbers[i] ≤ 1,000,000
&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;
&lt;p&gt;stack&lt;/p&gt;

&lt;h2 id=&quot;풀이-1&quot;&gt;풀이&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NextLargeNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertArrayEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertArrayEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertArrayEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertArrayEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertArrayEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertArrayEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;indexStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 30 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[programmers Series] Lv. 02 Minimumvalue</title>
        <link>/programmers/2024/07/30/Programmers-series-LV.-02-MinimumValue.html</link>
        <guid isPermaLink="true">/programmers/2024/07/30/Programmers-series-LV.-02-MinimumValue.html</guid>
        <description>&lt;h1 id=&quot;최솟값-만들기&quot;&gt;최솟값 만들기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12941&quot;&gt;Programmers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;pre&gt;
길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.
배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 이러한 과정을 배열의 길이만큼 반복하며,
두 수를 곱한 값을 누적하여 더합니다. 이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다. (단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)

예를 들어 A = [1, 4, 2] , B = [5, 4, 4] 라면

- A에서 첫번째 숫자인 1, B에서 첫번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)
- A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)
- A에서 세번째 숫자인 2, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)

즉, 이 경우가 최소가 되므로 29를 return 합니다.
배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.

 - 제한사항
배열 A, B의 크기 : 1,000 이하의 자연수
배열 A, B의 원소의 크기 : 1,000 이하의 자연수
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h1&gt;

&lt;p&gt;따로 없고 이중 for를 어떻게 for 하나로 표현할까 정도?&lt;/p&gt;

&lt;h1 id=&quot;풀이&quot;&gt;풀이&lt;/h1&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MinimumValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)];&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 30 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[mysql Summary Series] 08.executionplan</title>
        <link>/mysql/summary/2024/07/25/mysql-summary-series-08.ExecutionPlan.html</link>
        <guid isPermaLink="true">/mysql/summary/2024/07/25/mysql-summary-series-08.ExecutionPlan.html</guid>
        <description>&lt;h1 id=&quot;실행-계획&quot;&gt;실행 계획&lt;/h1&gt;

&lt;p&gt;옵티마이저는 사용자의 쿼리를 최적화해야 한다. 이를 위해서 MySQL은 통계 정보를 수집하여 튜닝을 진행한다.&lt;/p&gt;

&lt;h2 id=&quot;통계-정보&quot;&gt;통계 정보&lt;/h2&gt;

&lt;h3 id=&quot;테이블-인덱스-통계-정보&quot;&gt;테이블, 인덱스 통계 정보&lt;/h3&gt;
&lt;p&gt;비용 기반 최적화에서 가장 중요한 것이 통계 정보다. 통계 정보가 부정확하면 쿼리가 산으로 갈 수도 있다. 5.6부터 통계정보가 메모리에서만 관리되는게 아니라 영구적으로
저장하여 관리할 수 있게 됐다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;innodb_index_stats&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;innodb_table_stats&lt;/code&gt;로 확인할 수 있다. 또한 영구적으로 보관할지도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STATS_PERSISTENT&lt;/code&gt;로
설정할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;CREATE TABLE tableTest ( test1 INT PRIMARY KEY , test2 VARCHAR(30))
ENGINE = InnoDB
STATS_PERSISTENT = [DEFAULT | 0 | 1]

-- 0 저장 안 함
-- 1 저장 함
-- DEFAULT 시스템 변수에 따름

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;기본은 ON(1)이다. 물론 테이블 생성 후에도&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;ALTER TABLE ~ STATS_PERSISTENT=1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;와 같이 변경할 수도 있다. 이 통계 정보는&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;테이블이 새로 오픈되는 경우&lt;/li&gt;
  &lt;li&gt;테이블 레코드가 대량으로 변경되는 경우&lt;/li&gt;
  &lt;li&gt;ANALYZE TABLE 명령이 실행되는 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW TABLE STATUS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW INDEX FROM ~&lt;/code&gt;이 실행되는 경우&lt;/li&gt;
  &lt;li&gt;InnoDB 모니터가 활성화 되는 경우&lt;/li&gt;
  &lt;li&gt;innodb_stats_on_metadata 시스템 설정이 ON이고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW TABLE STATUS&lt;/code&gt; 가 실행되는 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;통계 정보가 갱신되면 쿼리 최적화가 한순간에 달라질 수도 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;innodb_stats_auto_recalc&lt;/code&gt;을 꺼서 위 경우 통계 갱신을 막을 수 있다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STATS_AUTO_RECALC&lt;/code&gt;을 통해서 설정할 수도 있다. (1은 자동, 0은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANALYZE TABLE&lt;/code&gt;에만 반응하도록, DEFAULT는 시스템 변수를 따라간다. )&lt;/p&gt;

&lt;p&gt;또한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;innodb_stats_transient_sample_pages&lt;/code&gt;로 샘플링 페이지를 정해서 일부를 가지고 통계를 낼 수도 있으며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;innodb_stats_persistent_sample_pages&lt;/code&gt;로
샘플링해서 저장하는 페이지 수를 정할 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;히스토그램&quot;&gt;히스토그램&lt;/h3&gt;

&lt;p&gt;8.0부터 컬럼 데이터 분포도를 참조할 수 있는 히스토그램도 수집한다. 히스토그램은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANALYZE TABLE ... UPDATE HISTOGRAM&lt;/code&gt; 명령으로 수동으로 수집, 관리된다.
종류는 두 가지다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Singleton : 컬럼 값 개별로 레코드 건수를 관리하는 히스토그램 (도수 분포라고도 불린다.)&lt;/li&gt;
  &lt;li&gt;Equi-Height : 컬럼 값의 범위를 균등한 개수로 구분해서 관리하는 히스토그램 (Height-Balanced라고도 불린다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;싱글톤 히스토그램은 컬럼이 가지는 값 별로 버킷이 할당되며, 높이-균형 히스토그램은 개수가 균등한 컬럼 값의 범위별로 하나의 버킷이 할당된다.
싱글톤 히스토그램이는 컬럼 값별로 누적된 건수의 비율을 가지고 있다. 높이-균형 히스토그램은 컬럼 값의 각 범위에 대해 레코드 건수 비율이 누적으로 표시된다. (그래프의 기울기가 의미가 있다.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sampling-rate :  히스토그램 정보를 수집하기 위해 스캔한 페이지의 비율을 저장한다. 샘플링 비율이 높아질수록 정확한 히스토그램이 되지만 테이블 스캔으로 부하가 늘어난다.&lt;/li&gt;
  &lt;li&gt;histogram-type : 히스토그램 종류를 저장한다.&lt;/li&gt;
  &lt;li&gt;number-of-buckets-specified : 버킷의 개수를 저장한다. 기본으로 100개 최대 1024개이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;생성된 히스토그램은 아래와 같이 지울 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;ANALYZE TABLE ~
DROP HISTOGRAM ON ~;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;단 지우면 쿼리 실행 계획이 달라질 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;용도&quot;&gt;용도&lt;/h4&gt;
&lt;p&gt;히스토그램으로 특정 범위의 데이터가 많고 적음을 식별할 수 있다. 이건 꽤 의미가 큰데, 예를 들어 조인의 경우는 이 데이터로 드라이빙, 드리븐이 바뀔 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;히스토그램과-인덱스&quot;&gt;히스토그램과 인덱스&lt;/h4&gt;
&lt;p&gt;MySQL에서는 쿼리의 실행 계획을 수립할 때 사용 가능한 인덱스들로부터 조건절에 일치하는 레코드 건수를 대략 파악하고 최종적으로 가장 괜ㅊ낳은 계획을 선택한다.
이때 조건절이 일치하는 레코드 건수를 예측하기 위해서 B-Tree를 샘플링해서 살펴본다. 인덱스 다이브(Index Dive)라고 한다.&lt;/p&gt;

&lt;p&gt;인덱스된 컬럼을 검색 조건으로 사용한다면 그 컬럼의 히스토그램은 사용하지 않고 실제 인덱스 다이브를 통해서 수집한 정보를 활용한다. 그러나 역시 비용이 필요하다.
실행 계획 수립만으로도 상당한 인덱스 다이브를 실행하고 비용도 커진다.&lt;/p&gt;

&lt;h3 id=&quot;코스트-모델&quot;&gt;코스트 모델&lt;/h3&gt;

&lt;p&gt;쿼리를 처리하려면 아래와 같은 작업을 해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;디스크로부터 데이터 페이지 읽기&lt;/li&gt;
  &lt;li&gt;메모리로부터 데이터 페이지 읽기&lt;/li&gt;
  &lt;li&gt;인덱스 키 비교&lt;/li&gt;
  &lt;li&gt;레코드 평가&lt;/li&gt;
  &lt;li&gt;메모리 임시 테이블 작업&lt;/li&gt;
  &lt;li&gt;디스크 임시 테이블 작업&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 과정으로 코스트가 얼마나 되는지 예측하고 이를 바탕으로 최적의 실행 계획을 찾는다. 5.7 이전에는 서버 소스 코드에 상수화해서 사용했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;EXPLAIN FORMAT = TREE
    SELECT * 
    FROM ~ WHERE ~ \G;

-- key_compare_cost
-- row_evaluate_cost
-- disk_temptable_create_cost
-- memory_temptable_create_cost
-- io_block_read_cost
-- memory_block_read_cost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그러나 이런 상수는 실제와 간극이 생긴다. 그래서 히스토그램, 메모리에 적재된 페이지의 비율이 관리되고 이들이 실행 계획 수립에 사용되기 시작됐다.&lt;/p&gt;

&lt;h2 id=&quot;실행-계획-확인&quot;&gt;실행 계획 확인&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DESC&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;으로 확인할 수 있다. 8.0부터는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FORMAT&lt;/code&gt; 옵션으로 json, tree를 선택할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;쿼리-실행-시간&quot;&gt;쿼리 실행 시간&lt;/h3&gt;
&lt;p&gt;8.0.18부터 실행 계획과 단계별 소요된 시간을 확인할 수 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN ANALYZE&lt;/code&gt;가 추가됐다. 들여쓰기는 호출 순서를 의미하며, 같은 레벨이면 상단이 먼저 실행된 거다.
정리하면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;들여쓰기가 같은 레벨이면 상단에 위치한 라인이 먼저&lt;/li&gt;
  &lt;li&gt;들여쓰기가 다른 레벨이면 가장 안쪽에 위치한 라인이 먼저 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN ANALYZE&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;과 다르게 실행 계획만 추출하는 것이 아닌 실제 쿼리를 사용하고 사용된 실행 계획과 소요 시간을 보여주는 것이다. 정말 쿼리의 질이 나쁘다면
EXPLAIN -&amp;gt; EXPLAIN ANALYZE 순으로 확인하는 것이 좋다.&lt;/p&gt;

&lt;h3 id=&quot;실행-계획-분석&quot;&gt;실행 계획 분석&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;EXPLAIN
SELECT *
FROM employees e 
INNER JOIN salaries s on s.emp_no=e.emp_no
WHERE first_name='ABC';
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;select_type&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;table&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;type&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;possible_keys&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;key&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;key_len&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ref&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;rows&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Extra&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SIMPLE&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;account&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ALL&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;null&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;null&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;null&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;null&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;id-컬럼&quot;&gt;id 컬럼&lt;/h4&gt;
&lt;p&gt;하나 이상의 하위 SELECT 문장을 포함할 수 있는데 SELECT 쿼리별로 부여되는 식별자 값이다. JOIN 되면 테이블 개수만큼 출력되지만 id 값은 늘지 않는다.
또한 id는 접근 순서를 의미하지는 않는다.&lt;/p&gt;

&lt;h4 id=&quot;select_type&quot;&gt;select_type&lt;/h4&gt;
&lt;p&gt;SELECT 쿼리가 어떤 타입의 쿼리인지 표시되는 컬럼이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SIMPLE  : UNION이나 SUBQUERY를 사용하지 않은 단순 쿼리인 경우&lt;/li&gt;
  &lt;li&gt;PRIMARY : UNION, SUBQUERY를 가지는 실행 계획에서 바깥쪽에 있는 단위 쿼리이다. 하나만 존재한다.&lt;/li&gt;
  &lt;li&gt;UNION   : UNION으로 결합하는 SELECT 쿼리 가운데 첫번쨰가 아닌 쿼리를 UNION으로 표시한다. 첫번째는 DERIVED가 된다.&lt;/li&gt;
  &lt;li&gt;DEPENDENT UNION : UNION, UNION ALL으로 집합을 겹합하는 쿼리에 표시된다. DEPENDENT는 UNION, UNION ALL로 결합된 단위 쿼리가 외부 쿼리에 의해 영향을 받는 것을 의미한다.&lt;/li&gt;
  &lt;li&gt;UNION RESULT : UNION ALL, UNION 쿼리는 UNION의 결과를 임시 테이블로 생성했는데 8.0에도 여전히 임시 테이블에 결과를 버퍼링한다.UNION RESULT에는 id가 부합되지 않는다.&lt;/li&gt;
  &lt;li&gt;SUBQUERY : SUBQUERY는 FROM 절 외에 사용되는 서브쿼리만을 의미한다. FROM 절에 사용된 서브쿼리는 select_type은 DERIVED로 표시된다. 그 밖은 SUBQUERY로 표기된다.&lt;/li&gt;
  &lt;li&gt;DEPENDENT SUBQUERY : 서브쿼리가 바깥쪽 쿼리에서 정의된 컬럼을 사용하면 DEPENDENT SUBQUERY라고 표시된다. 외부 쿼리가 실행되고 내부를 실행하므로 일반 서브쿼리보다 처리 속도가 느리다.&lt;/li&gt;
  &lt;li&gt;DERIVED : 단위 SELECT 쿼리의 실행 결과로 메모리나 디스크에 임시 테이블을 생성하는 것을 의미한다.&lt;/li&gt;
  &lt;li&gt;DEPENDENT DERIVED : 8.0 이전에는 FROM  절의 서브쿼리는 외부 컬럼을 사용할 수가 없었는데 8.0부터 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LATERAL JOIN&lt;/code&gt;이 추가되면서 서브쿼리에서도 외부 컬럼을 참조할 수 있게 됐다.&lt;/li&gt;
  &lt;li&gt;UNCACHEABLE SUBQUERY : 하나의 쿼리 문장에 서브쿼리가 하나만 있다고 한 번만 실행되는 건 아니다. 그런데 조건이 같은 쿼리가 실행되면, 즉 이전의 결과를 재활용할 수 있다면 캐싱한다.
    &lt;ul&gt;
      &lt;li&gt;SUBQUERY : 처음 한 번만 실행하고 캐싱해서 재활용&lt;/li&gt;
      &lt;li&gt;DEPENDENT SUBQUERY : 컬럼 값 단위로 캐시해두고 사용
이 경우는 캐시를 사용하지 못하는 요소가 있기 때문에 위와 같은 결과를 출력한다. 이유는 아래와 같다.
        &lt;ol&gt;
          &lt;li&gt;사용자 변수가 서브쿼리에 사용된 경우&lt;/li&gt;
          &lt;li&gt;NOT-DETERMINISTIC 속성의 스토어드 루틴이 서브쿼리 내에 사용된 경우&lt;/li&gt;
          &lt;li&gt;UUID(), RAND()와 같이 결과 값이 호출될 때마다 달라지는 함수가 사용된 경우&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UNCACHEABLE UNION : 캐싱이 불가능한 UNION의 케이스다.&lt;/li&gt;
  &lt;li&gt;MATERIALIZED : FROM, IN에 사용된 서브쿼리의 최적화를 위해서 사용된다. 5.7부터 서브쿼리 내용을 임시 테이블로 구체화한 후, 임시 테이블과 조인하는 형태로 최적화되어 처리된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;table-컬럼&quot;&gt;table 컬럼&lt;/h4&gt;
&lt;p&gt;SELECT 쿼리 기준이 아니라 테이블 기준으로 표시된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;derived N &amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;union M, N&amp;gt;&lt;/code&gt;과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt;으로 둘러싸인 이름이 명시되는 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;임시 테이블&lt;/code&gt;을 의미한다.
N, M은 id 값을 지칭한다.&lt;/p&gt;

&lt;h4 id=&quot;partitions-컬럼&quot;&gt;partitions 컬럼&lt;/h4&gt;
&lt;p&gt;옵티마이저가 사용하는 파티션은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN PARTITION&lt;/code&gt;을 사용해서 확인할 수 있었지만 8.0부터는 EXPLAIN으로 파티션 관련 실행 계획까지 모두 확인할 수 있게 됐다.
그래서 실행 계획에 어떤 파티션에 접근했는가를 확인할 수 있다. 이렇게 일부 사용하는 파티션만 접근하는 것을 파티션 프루닝(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PARTITION PRUNING&lt;/code&gt;)이라고 한다.&lt;/p&gt;

&lt;p&gt;파티션 일부만 전체 접근해도 type에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL&lt;/code&gt;이라고 출력된다. 즉 일부 파티션만 풀스캔으로 처리됨을 의미한다. 이는 물리적으로 개별 테이블처럼 별도의 저장 공간을
가지기 때문이다.&lt;/p&gt;

&lt;h4 id=&quot;type-컬럼&quot;&gt;type 컬럼&lt;/h4&gt;
&lt;p&gt;서버가 각 테이블의 레코드를 어떤 방식으로 읽었는지를 나타낸다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;system : 레코드가 1건만 존재하는 테이블 또는 한 건도 존재하지 않는 테이블을 참조하는 형태의 접근 (MyISAM, MEMORY에서)&lt;/li&gt;
  &lt;li&gt;const  : 반드시 1건을 반환하는 처리방식을 의미한다. 다중 인덱스에서는 인덱스 일부 컬럼만 조건으로 던져서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt;로 접근할 수 없다. 옵티마이저가 쿼리를 최적화하는 단계에서 쿼리를 먼저 실행해서 통째로 상수화한다.&lt;/li&gt;
  &lt;li&gt;eq_ref : 여러 테이블이 조인되는 쿼리에서 표시된다. 조인에서 처음 읽은 컬럼 값을 그다음 읽을 때 검색조건에 사용할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eq_ref&lt;/code&gt;라고 한다. 그래서 두 번째
이후 읽는 테이블의 type에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eq_ref&lt;/code&gt;가 표시된다.&lt;/li&gt;
  &lt;li&gt;ref    : 조인 순서와 상관없다. PK, UQ도 상관 없다. 동등 검색 조건으로 접근할 때 사용된다. 레코드가 1건이라는 보장이 없으므로 const, eq_ref보다는 느리다. 동등 조건만으로 비교되므로 그래도 빠른 편이다.&lt;/li&gt;
  &lt;li&gt;fulltext : 전문 검색 인덱스를 사용해서 레코드를 읽는 접근 방법을 의미한다. 전문 검색은 통계 정보가 관리되지 않는다.&lt;/li&gt;
  &lt;li&gt;ref_or_null : ref와 접근 방식은 같은데 NULL 비교가 추가된 형태다. (ref 또는 IS NULL)&lt;/li&gt;
  &lt;li&gt;unique_subquery : IN(subquery) 형태의 쿼리를 위한 접근 방식이다. 서브쿼리에서 중복되지 않은 유니크한 값만 반환될 때 이 접근 방법을 사용한다. (이런 세미 조인의 경우를 최적화하는 여러 가지 방법이 있다. table_pullout 같은)&lt;/li&gt;
  &lt;li&gt;index_subquery : IN 연산자 특성상 조건은 괄호 안에 있는 값의 목록에서 중복된 값이 먼저 제거돼야 한다. 서브 쿼리 중 중복이 될 수도 있는데, 인덱스를 이용해서 제거할 수 있을 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index_subquery&lt;/code&gt;가 사용된다.&lt;/li&gt;
  &lt;li&gt;range   : 인덱스 레인지 스캔 형태의 접근 방법이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IS NULL&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BETWEEN&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IN&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIKE&lt;/code&gt; 등의 연산자로 검색할 때 사용된다. 얼마나 많은 레코드를 필요로 하느냐에 따라서긴 하지만 웬만 하면 빠르다.&lt;/li&gt;
  &lt;li&gt;index_merge : 2개 이상의 인덱스를 이용해서 각가의 검색 결과를 만든 후, 그 결과를 병합해서 처리하는 방식이다. 사실 그렇게 효율적인건 아니다.
    &lt;ol&gt;
      &lt;li&gt;여러 인덱스를 읽어야 하므로 range보다 느리다.&lt;/li&gt;
      &lt;li&gt;전문 인덱스를 사용하면 index_merge가 적용되지 않는다.&lt;/li&gt;
      &lt;li&gt;항상 2개 이상의 집합이 되므로, 교집합, 합집합, 중복 제거 같은 작업이 수반된다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;index : 인덱스 풀 스캔을 의미한다. 테이블 풀 스캔이랑 거의 다를 바가 없지만 레코드 통쨰로 움직이는 것보다 나으므로 빠르게 처리된다. 또한 쿼리에 따라서 정렬된 인덱스의 장점을 이용할 수도 있다.
    &lt;ol&gt;
      &lt;li&gt;range나 const, ref로 접근을 못 할 경우&lt;/li&gt;
      &lt;li&gt;인덱스에 포함된 컬럼만으로 처리할 수 있는 경우 = 커버링 인덱스&lt;/li&gt;
      &lt;li&gt;인덱스를 이용해서 정렬, 그루핑이 가능할 경우
1 + 3 이거나 1 + 2인 경우 사용된다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;ALL : 테이블 풀 스캔이다. 대량의 I/O를 유발한다. 리드 어헤드로 미리 읽어서 처리할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;possible_keys-컬럼&quot;&gt;possible_keys 컬럼&lt;/h4&gt;
&lt;p&gt;비용이 가장 낮을 것 같은 실행 계획을 옵티아미저는 선택한다. 여기 들어간 인덱스는 그 선택지 중 고려됐던 내용들이다.&lt;/p&gt;

&lt;h4 id=&quot;key&quot;&gt;key&lt;/h4&gt;
&lt;p&gt;최종 선택된 실행 계획에서 사용하는 인덱스를 의미한다.&lt;/p&gt;

&lt;h4 id=&quot;key_len&quot;&gt;key_len&lt;/h4&gt;
&lt;p&gt;쿼리를 처리하기 위해서 다중 컬럼으로 구성된 인덱스에서 몇 개의 컬럼까지 사용했는지를 알려준다.&lt;/p&gt;

&lt;h4 id=&quot;ref&quot;&gt;ref&lt;/h4&gt;
&lt;p&gt;접근 방법이 ref면 참조 조건으로 어떤 값이 제공됐는지를 보여준다. 상숫 값이라면 const, 다른 컬럼 값이면 테이블명, 컬럼 명이 표시된다. 참조용 값을 변환하는 과정을 거쳤다면 func으로 표시된다.&lt;/p&gt;

&lt;h4 id=&quot;rows&quot;&gt;rows&lt;/h4&gt;
&lt;p&gt;rows는 실행 계획 효율성 판단을 위해서 예측했던 레코드 건수를 보여준다. rows는 반환하는 레코드 개수가 아니라 처리하기 위해서 얼마나 많은 레코드를 읽고 체크하는지를 의미한다.&lt;/p&gt;

&lt;h4 id=&quot;filtered&quot;&gt;filtered&lt;/h4&gt;
&lt;p&gt;rows 컬럼의 값은 인덱스를 사용하는 조건에만 일치하는 레코드 건수를 예측한 것이다(스토리지). WHERE 조건에 모두 인덱스를 태울 수는 없으므로 필터링을 하는데 여기서 일치한 정도를 의미한다. 100에 가까울수록 그대로 썼다는 의미가 된다.&lt;/p&gt;

&lt;h4 id=&quot;extra&quot;&gt;Extra&lt;/h4&gt;
&lt;p&gt;성능에 관련된 주요 내용이 Extra에 자주 표시되다. 또한 내부적인 처리 알고리즘에 대해서 중요한 정보를 보여주는 경우가 많다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;const row not found : const 접근 방법으로 찾았는데 결과가 없는 경우&lt;/li&gt;
  &lt;li&gt;distinct : distinct 처리를 위해서 필요 없는(조인하지 않아도 되는) 경우는 무시하고 읽었을 경우&lt;/li&gt;
  &lt;li&gt;firstMatch : 세미 조인으로 첫 번째 일치하는 한 건만 검색하는 최적화를 사용했을 경우&lt;/li&gt;
  &lt;li&gt;full scan on NULL key : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL in (SELECT ~ FROM )&lt;/code&gt;식의 쿼리가 되는 경우 (서브 쿼리가 1건이라도 있으면 결과는 NULL 아니면 FALSE)&lt;/li&gt;
  &lt;li&gt;impossible HAVING : HAVING에 만족하는 레코드가 없을 경우&lt;/li&gt;
  &lt;li&gt;impossible WHERE : WHERE이 항상 FALSE가 될 수 밖에 없는 경우&lt;/li&gt;
  &lt;li&gt;looseScan : LooseScan 최적화가 사용되는 경우&lt;/li&gt;
  &lt;li&gt;No matching min/max row : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIN()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAX()&lt;/code&gt;에 일치하는 레코드가 한 건도 없을 경우 (이 경우 결과로 NULL이 반환된다.)&lt;/li&gt;
  &lt;li&gt;no matching row in const table : 실행 계획을 만들기 위한 기초 자료가 없음&lt;/li&gt;
  &lt;li&gt;no matching rows after partition pruning : 파티션된 테이블에서 UPDATE, DELETE를 했을 때 대상 레코드가 없을 경우 표시 혹은 대상 파티션이 없는 경우&lt;/li&gt;
  &lt;li&gt;no table used : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM DUAL&lt;/code&gt; 형태의 실행 계획&lt;/li&gt;
  &lt;li&gt;not exists : Anti-JOIN 형태는 left join에 null이 아닌 걸로 튜닝할 수 있다. OUTER JOIN으로 Anti-JOIN을 수행하는 쿼리에서 보인다.&lt;/li&gt;
  &lt;li&gt;plan isn’t ready yet : 다른 커넥션 쿼리 실행 계획이 준비되지 않았을 경우&lt;/li&gt;
  &lt;li&gt;recursive : CTE(Common Table Expression)으로 재귀 쿼리를 사용할 때&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;WITH RECURSIVE cte ( n ) AS 
(
    SELECT 
    ~
)
SELECT * FROM cte;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;rematerialize : LATERAL JOIN의 경우 레코드 별로 서브쿼리를 실행해서 그 결과를 임시 테이블에 저장한다. 이 과정을 의미한다.&lt;/li&gt;
  &lt;li&gt;select tables optimized away : MIN, MAX만 사용되거나 GROUP BY로 MIN, MAX를 조회하는 쿼리가 인덱스를 오름, 내림차순으로 1건만 읽는 경우&lt;/li&gt;
  &lt;li&gt;start temporary, end temporary : duplicate weed-out이 사용되면 내부 불필요한 중복건 제거를 위해서 내부 임시 테이블을 사용하는데 이때 표시된다.&lt;/li&gt;
  &lt;li&gt;unique row not found : 두 개의 테이블이 각각 UQ 컬럼으로 outer 조인할 때 아우터 테이블에 일치하는 레코드가 존재하지 않을 때&lt;/li&gt;
  &lt;li&gt;using filesort : ORDER BY를 처리하기 위해서 인덱스를 사용하지 못 할 경우 정렬용 메모리 버퍼에 복사해서 퀵소트 혹은 힙소트를 사용해서 정렬할 때 표시된다.&lt;/li&gt;
  &lt;li&gt;using index :  인덱스만으로 질의를 처리할 수 있을 때 표시된다. (커버링 인덱스)&lt;/li&gt;
  &lt;li&gt;using index condition : ICP(인덱스 컨디션 푸시다운) 최적화를 하면 표시된다.&lt;/li&gt;
  &lt;li&gt;using index for group-by : group by가 인덱스를 이용하면 정렬된 인덱스 컬럼을 순서대로 읽으면서 그루핑만 수행한다. 이 경우 표시된다.
    &lt;ul&gt;
      &lt;li&gt;타이트 인덱스 스캔을 통한 GROUP BY 처리 : 인덱스로 group by를 할 수 있어도 AVG(), SUM(), COUNT() 같이 모든 인덱스를 다 읽어야 하는 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using index fro group-by&lt;/code&gt;가 표시되지 않는다.&lt;/li&gt;
      &lt;li&gt;루스 인덱스 스캔을 통한 GROUP BY 처리 : 그루핑 컬럼 말고 아무것도 조회하지 않는 쿼리에서 루스 인덱스 스캔을 사용할 수 있다. MIN(), MAX()이 조회하는 값이 인덱스 처음 혹은 마지막이여도 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;using index for skip scan : 인덱스 스킵 스캔 최적화를 사용하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using index for skip scan&lt;/code&gt; 메시지를 표시한다.&lt;/li&gt;
  &lt;li&gt;using join buffer(Block Nested Loop, Batched Key Access, hash join)&lt;/li&gt;
  &lt;li&gt;using MRR : Multi Range Read, 여러 개의 키를 한 번에 스토리지 엔진에 전달하고, 스토리지 엔진은 넘겨 받은 키 값을 정렬해서 페이지 접근을 줄일 수 있게 최적화한다.&lt;/li&gt;
  &lt;li&gt;using sort_union, using union, using, intersect : index_merge으로 실행되는 경우 2개 이상 인덱스가 동시 사용되는 경우
    &lt;ul&gt;
      &lt;li&gt;using intersect : AND로 연결된 경우 각 처리 결과에서 교집합을 추출한 경우&lt;/li&gt;
      &lt;li&gt;using union : OR로 연결된 경우 합집을 추출해내는 경우&lt;/li&gt;
      &lt;li&gt;using sort_union : sort해서 중복을 제거한 경우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;using temporary : 쿼리를 처리하는 동안 중간 결과를 담아 두기 위해서 임시 테이블을 사용하는 경우&lt;/li&gt;
  &lt;li&gt;using where     : MySQL 엔진 레이어에서 별도의 가공을 해서 필터링을 처리할 경우 표시된다.&lt;/li&gt;
  &lt;li&gt;zero limit      : 쿼리 결괏 값의 메타데이터만 필요한 경우 ( 테이블의 레코드를 읽지 않고 결과 값의 메타 정보만 반환한다. )&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 25 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[mysql Summary Series] 07.optimizer</title>
        <link>/mysql/summary/2024/07/25/mysql-summary-series-07.Optimizer.html</link>
        <guid isPermaLink="true">/mysql/summary/2024/07/25/mysql-summary-series-07.Optimizer.html</guid>
        <description>&lt;h1 id=&quot;optimizer&quot;&gt;Optimizer&lt;/h1&gt;

&lt;p&gt;MySQL 서버로 요청된 쿼리는 더 효율적인 방법으로 처리하려고 노력한다. 주로 어떤 방법이 최적이고 최소 비용이 소모될지 결정하는 식으로 산출해낸다.&lt;/p&gt;

&lt;h2 id=&quot;쿼리-실행-절차&quot;&gt;쿼리 실행 절차&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;사용자로부터 요청된 SQL을 토큰 단위로 잘라서 분리한다 - ParseTree&lt;/li&gt;
  &lt;li&gt;SQL의 파싱 정보를 확인하면어 어떤 테이블을 읽고, 어떤 인덱스를 이용해서 테이블을 읽을지 선택한다.&lt;/li&gt;
  &lt;li&gt;결정된 테이블을 읽어서 스토리지 엔진으로부터 데이터를 가져온다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-파싱&quot;&gt;1. 파싱&lt;/h3&gt;
&lt;p&gt;SQL 파서 모듈로 처리한다. 문법적 에러는 여기서 걸러진다. 여기서 ParseTree가 만들어진다.&lt;/p&gt;

&lt;h3 id=&quot;2-최적화-및-실행-계획-수립-옵티마이저에서-처리-&quot;&gt;2. 최적화 및 실행 계획 수립( 옵티마이저에서 처리 )&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;불필요한 조건 제거 및 복잡한 연산의 단순화&lt;/li&gt;
  &lt;li&gt;여러 테이블에 조인이 있다면 어떤 순서로 테이블을 읽을지 결정&lt;/li&gt;
  &lt;li&gt;각 테이블에 사용된 조건과 인덱스 통계 정보를 이용해 사용할 인덱스를 결정&lt;/li&gt;
  &lt;li&gt;가져온 레코드들을 임시 테이블에 넣고 다시 한 번 가공해야 하는지 결정&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;옵티마이저의-종류&quot;&gt;옵티마이저의 종류&lt;/h2&gt;
&lt;p&gt;대부분의 DBMS는 CBO(Cost-based optimizer)를 채택했다. 초기에는 RBO(Rule-base optimizer)을 사용했다.&lt;/p&gt;

&lt;h3 id=&quot;rbo&quot;&gt;RBO&lt;/h3&gt;
&lt;p&gt;테이블의 레코드 건수나 선택도 등을 고려하지 않고 옵티마이저에 내장된 우선 순위에 따라 실행 계획을 수립하는 방식을 의미한다. 같은 쿼리를 던지면
거의 항상 같은 실행 방법을 만들어낸다.&lt;/p&gt;

&lt;h3 id=&quot;cbo&quot;&gt;CBO&lt;/h3&gt;
&lt;p&gt;쿼리를 처리하기 위한 여러 가지 방법을 만들고, 각 단위 작업의 비용 정보와 대상 테이블의 예측된 통계 정보를 이용해서 실행 계획별 비용을 산출한다.&lt;/p&gt;

&lt;h2 id=&quot;기본-데이터-처리&quot;&gt;기본 데이터 처리&lt;/h2&gt;

&lt;h3 id=&quot;풀-테이블-스캔-풀-인덱스-스캔&quot;&gt;풀 테이블 스캔, 풀 인덱스 스캔&lt;/h3&gt;
&lt;p&gt;옵티마이저는 아래의 조건일 때 주로 풀 테이블 스캔(전체 검색)을 선택한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;테이블의 레코드 건수가 너무 작아서 인덱스를 읽는 것보다 효율적인 경우&lt;/li&gt;
  &lt;li&gt;WHERE 절이나 ON 절에 인덱스를 이용할 수 있는 적절한 조건이 없는 경우&lt;/li&gt;
  &lt;li&gt;옵티마이저가 판단한 조건 일치 레코드 건수가 너무 많은 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;InnoDB는 특정 테이블의 연속된 페이지를 읽으면 백그라운드 쓰레드에 의해서 리드 어헤드(Read ahead) 작업이 자동으로 시작되어 미리 필요한 데이터를 
읽어서 버퍼 풀에 가져다 둔다. 즉, 처음 몇 개만 foreGroundThread가 읽기를 처리하고 나머지는 그 동안 backgroundThread가 읽어와서 적재한 데이터를 가져다 쓴다. 
이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;innodb_read_ahead_threshold&lt;/code&gt;로 변경할 수 있으며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인덱스 풀 스캔&lt;/code&gt;에서도 동일하게 작동된다.&lt;/p&gt;

&lt;h3 id=&quot;order-byusing-filesort&quot;&gt;ORDER BY(Using filesort)&lt;/h3&gt;

&lt;p&gt;정렬을 처리하는 방법은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인덱스를 사용&lt;/code&gt;하거나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filesort&lt;/code&gt;하는 방법으로 나눌 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;장점&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;단점&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INSERT, UPDATE, DELETE 시 인덱스가 정렬된 상태로 수행되므로 읽기만 하면 된다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INSERT, DELETE, UPDATE 시 인덱스정렬 작업이 필요하다. &lt;br /&gt; 인덱스 때문에 공간이 더 필요하다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Filesort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스를 생성할 필요가 없다. &lt;br /&gt; 정렬할 레코드가 많지 않으면 메모리에서 Filesort하므로 빠르다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;정렬 작업이 쿼리 실행 시 처리되므로 쿼리 응답속도가 느리다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;레코드 정렬은 filesort, index 둘 다 가능하다. 인덱스를 이용하는게 웬만한 경우에 더 유리하다. 그러나 항상 인덱스를 태워서 정렬하기는 어렵다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;정렬 기준이 많아서 모두 인덱스로 생성하는 것은 어렵다.&lt;/li&gt;
  &lt;li&gt;GROUP BY 결과 또는 DISTINCT 같은 처리 결과를 정렬해야 하는 경우&lt;/li&gt;
  &lt;li&gt;UNION 결과와 같이 임시테이블 결과를 다시 정렬해야 하는 경우&lt;/li&gt;
  &lt;li&gt;랜덤하게 결과 레코드를 가져와야 하는 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;sortbuffer&quot;&gt;SortBuffer&lt;/h4&gt;
&lt;p&gt;MySQL은 별도 메모리 공간을 할당받아서 사용하는데 이 메모리 공간을 소트 버퍼라고 한다. 소트 버퍼는 정렬이 필요한 경우 할당된다. 레코드 크기에 따라 가변적으로 
증가하지만 최대 사용 가능한 소트 버퍼의 공간은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort_buffer_size&lt;/code&gt;라는 시스템 변수로 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;만일 소트 버퍼 할당 크기보다 정렬해야하는 레코드가 더 크면 여러 조각으로 나눠서 처리하는데, 임시 저장을 위해서 디스크를 사용한다. 정렬하고 디스크에 임시 기록하고
이 과정을 반복한다. 여기서 각 버퍼 크기만큼 정렬된 레코드를 다시 병합하고 정렬을 수행해야 한다. 이 병합 작업을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi-merge&lt;/code&gt;라고 표현한다. 
이 작업들이 모두 디스크의 쓰기와 읽기를 유발하며, 레코드 건수가 많을수록 이 반복 작업의 횟수가 많아진다.&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort_buffer_size&lt;/code&gt;가 크면 좋지 않을까하는 의문을 가질 수 있지만 sortBuffer는 세션 메모리 영역에 해당된다. 즉, 클라이언트가 공유해서 사용할 수 있는
영역이 아니다. 커넥션이 많거나, 정렬 작업이 많으면 소트 버퍼로 소비되는 메모리 공간티 커진다. 그래서 linux에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OOM Killer&lt;/code&gt;가 강제 종료를 감행할 수도 있다.&lt;/p&gt;

&lt;h5 id=&quot;정렬-알고리즘&quot;&gt;정렬 알고리즘&lt;/h5&gt;
&lt;p&gt;정렬 알고리즘은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Single-pass&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Two-pass&lt;/code&gt;로 나뉠 수 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Single-pass&lt;/code&gt;는 레코드를 통으로 가져와 정렬하는 방식이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Two-pass&lt;/code&gt;는 PK만 읽어서
정렬하고 정렬된 순서대로 다시 테이블을 읽어오는 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Single-pass&lt;/code&gt;는 두 번 읽을 필요가 없지만 정렬 시 더 많은 버퍼가 필요하다. 반대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Two-pass&lt;/code&gt;는 두 번 읽지만 소트 버퍼 가용성이 높다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;레코드 크기가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_length_for_sort_data&lt;/code&gt;보다 클 때&lt;/li&gt;
  &lt;li&gt;Blob, Text 컬럽이 select 될 때&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 경우에만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Two-pass&lt;/code&gt;를 사용한다.&lt;/p&gt;

&lt;h5 id=&quot;정렬-처리-방법&quot;&gt;정렬 처리 방법&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;정렬 처리 방법&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;실행 계획의 Extra 컬럼 내용&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스를 사용한 정렬&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;조인에서 드라이빙 테이블만 정렬&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Using filesort&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;조인에서 조인 결과를 임시 테이블로 저장 후 정렬&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Using temporary; Using filesort&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스를 이용한 정렬
ORDER BY에서 명시된 컬럼이 제일 먼저 읽는 테이블(조인)이고, ORDER BY 순서대로 생성된 인덱스가 있어야 한다. 또한 B-Tree만 가능하다. 여러 테이블이 조인
된다면 Nested-loop 조인에서 사용한다. 그러나 실행 계획에 조인 버퍼가 사용되면 순서가 흐트러질 수도 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조인 드라이빙 테이블만 정렬
먼저 정렬하고 조인하는게 차선책이 될 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;임시 테이블을 이용한 정렬
2개 이상을 조인하고 정렬하려면 임시테이블이 필요할 수도 있다. 위의 셋 중 가장 느린 정렬 케이스다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;limit&quot;&gt;LIMIT&lt;/h5&gt;
&lt;p&gt;ORDER BY, GROUP BY는 WHERE을 만족하는 LIMIT 만큼 가져와서 처리할 수 없다. 모두 가져와서 정렬하고 LIMIT으로 끊어야 하기 때문이다. 이에 대한 처리 방식으로&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;스트리밍 방식
    &lt;ul&gt;
      &lt;li&gt;서버 쪽에서 요청한 데이터가 얼마인지 관계없이 조건에 일치하는 레코드가 검색되면 바로바로 클라이언트로 전송하는 방식&lt;/li&gt;
      &lt;li&gt;마지막 레코드를 받을 기약이 없지만 첫번째는 찾자 마자 바로 던질 계획이다. ( 건수 상관 없이 빠른 응답 시간을 보장한다. )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;버퍼링
    &lt;ul&gt;
      &lt;li&gt;ORDER BY, GROUP BY는 스트리밍이 불가하다. 모든 레코드를 가져온 후 정렬 혹은 그루핑해서 차례대로 보내야 하기 때문이다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;검색 - 정렬&lt;/code&gt;이 과정 사이에 클라이언트는 기다려야만 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Join은 어느 테이블이 먼저 드라이빙이 되는지도 중요하지만 어떤 정렬 방식으로 처리되는지도 중요하다. 최대한 인덱스를 사용하도록 유도하고 그렇지 못하면
최소한 테이블만 정렬해도 되는 수준으로 유도하는 것도 좋은 방법이다.&lt;/p&gt;

&lt;h3 id=&quot;group-by&quot;&gt;GROUP BY&lt;/h3&gt;
&lt;p&gt;GROUP BY에서는 HAVING을 사용할 수 있다. HAVING은 GROUP BY 결과에 대해서 필터링 역할을 수행한다. GROUP BY에 사용된 조건은 인덱스를 사용해서 처리될 수 
없으므로 HAVING 절을 튜닝하려고 인덱스를 생성하거나 할 필요는 없다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;인덱스를 사용
    &lt;ul&gt;
      &lt;li&gt;인덱스 스캔&lt;/li&gt;
      &lt;li&gt;루스 인덱스 스캔&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인덱스를 사용하지 못하는 경우
    &lt;ul&gt;
      &lt;li&gt;임시테이블&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;인덱스-스캔-사용한-group-by&quot;&gt;인덱스 스캔 사용한 GROUP BY&lt;/h4&gt;
&lt;p&gt;GROUP BY 컬럼에 이미 인덱스가 있다면 그 인덱스를 차례대로 읽으면서 그루핑을 수행한다. 그러나 인덱스를 사용해서 처리하더라도 그룹 함수 등의 그룹 값을 처리해야
한다면 임시 테이블이 필요할 수도 있다.&lt;/p&gt;

&lt;h4 id=&quot;루스-인덱스-스캔-사용한-group-by&quot;&gt;루스 인덱스 스캔 사용한 GROUP BY&lt;/h4&gt;
&lt;p&gt;인덱스의 레코드를 건너뛰면서 필요한 부분만 읽어서 가져오는 것을 의미한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using index for group-by&lt;/code&gt; 코멘트가 표시된다. 루스 인덱스 스캔은 단일 테이블에
대해서 수행되는 GROUP BY에만 처리할 수 있다. 루스 인덱스 스캔은 인덱스 레인지 스캔과 반대로 유니크한 값이 적을수록 성능이 향상된다. (스캔 분포도가 좋지 않을 경우
스킵할 대상이 많다.)&lt;/p&gt;

&lt;h4 id=&quot;임시-테이블을-사용한-group-by&quot;&gt;임시 테이블을 사용한 GROUP BY&lt;/h4&gt;
&lt;p&gt;GROUP BY 기준 컬럼이 드라이빙에 있든 드리븐에 있든 관계없이 인덱스를 전혀 사용하지 못할 때 이 방식으로 처리된다. Extra에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using temporary&lt;/code&gt;가 표시된다.&lt;/p&gt;

&lt;h3 id=&quot;distinct&quot;&gt;DISTINCT&lt;/h3&gt;
&lt;p&gt;DISTINCT 처리가 인덱스를 사용하지 못 할 떄 항상 임시 테이블을 사용한다. Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using temporary&lt;/code&gt;가 출력되지는 않는다.&lt;/p&gt;

&lt;h3 id=&quot;내부-임시-테이블-활용&quot;&gt;내부 임시 테이블 활용&lt;/h3&gt;
&lt;p&gt;레코드를 정렬하거나 그루핑할 때는 내부적인 임시 테이블을 사용한다. 여기서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE TEMPORARY TABLE&lt;/code&gt; 명령으로 만든 임시 테이블과 다르기 때문에
internal이라고 표현한다. 일반적으로 임시 테이블은 처음에 메모리에 생성됐다가 테이블 크기가 커지면 디스크로 옮겨진다. 몇몇 케이스는 바로 디스크에 만들어지기도 한다.&lt;/p&gt;

&lt;p&gt;#### 임시 테이블이 필요한 쿼리&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ORDER BY와 GROUP BY에 명시된 컬럼이 다른 쿼리&lt;/li&gt;
  &lt;li&gt;ORDER BY, GROUP BY에 명시된 컬럼이 조인 순서상 첫 번째 테이블이 아닌 쿼리&lt;/li&gt;
  &lt;li&gt;DISTINCT, ORDER BY가 동시에 존재하는 경우 또는 DISTINCT가 인덱스로 처리되지 못하는 쿼리&lt;/li&gt;
  &lt;li&gt;UNION, UNION DISTINCT가 사용된 쿼리&lt;/li&gt;
  &lt;li&gt;쿼리 실행 계획에 select_type이 DERIVED인 쿼리&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#### 임시 테이블이 디스크에 생성되는 경우&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UNION이나 UNION ALL에서 SELECT되는 컬럼 중 길이가 512바이트 이상인 크기의 컬럼이 있는 경우&lt;/li&gt;
  &lt;li&gt;GROUP BY나 DISTINCT 컬럼에서 512 바이트 이상인 크기의 컬럼이 있는 경우&lt;/li&gt;
  &lt;li&gt;메모리 임시 테이블의 크기가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tmp_table_size&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_heap_table_size&lt;/code&gt; 보다 크거나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;temptable_max_ram&lt;/code&gt;보다 큰 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;고급-최적화&quot;&gt;고급 최적화&lt;/h2&gt;
&lt;p&gt;옵티마이저가 실행 계획을 세울 때 통계 정보와 옵티마이저 옵션을 결합해서 최적의 실행 계획을 수립하게 된다. 옵티마이저 옵션은 조인관련과 옵티마이저 스위치로 구분할 수 있다. 
이 옵션은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SET GLOBAL optimizer_switch='~';&lt;/code&gt;로 전역으로 가능하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SET SESSION optimizer_switch='~';&lt;/code&gt;로 커넥션 별로 마지막으로 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT /*+SET_VAR(optimizer_switch='!')*/&lt;/code&gt;로 쿼리에만 옵티마이저 힌트를 줄 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;옵티마이저-스위치-옵션&quot;&gt;옵티마이저 스위치 옵션&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;MRR과 배치 키 액세스(mrr &amp;amp; batched_key_access) : 이중 for 같은 방식으로 조인하는 NestedLoop의 단점을 극복하기 위해서 드라이빙을 읽어서 드리븐과 조인을 즉시하지 않고 
조인 대상을 버퍼링하고 조인버퍼에 차면 버퍼링된 레코드를 한 번에 요청해서 데이터 페이지에 정렬된 순서로 접근해서 디스크의 데이터 페이지를 읽기를 최소화 하는 방식이다.MRR(Multi-Ranged Read) 
이 방식을 응용한 방식이 BKA(Batched Key Access) 조인이라고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;블록 네스티드 루프 조인 : 네스티드 루프 조인은 레코드를 읽어서 다른 공간에 저장하지 않고 즉시 드리븐 테이블의 레코드를 찾아서 반환한다. 블록 네스티드 루프 조인은 
조인 버퍼가 사용되는지 여부와 조인에서 드라이빙 테이블과 드리븐 테이블이 어떤 순서로 조인되느냐에 따라서 갈린다. Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using join buffer( block nested loop )&lt;/code&gt;로 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스 컨디션 푸시 다운 : 인덱스를 범위 제한 조건으로 사용하지 못하더라도 인덱스에 포함된 컬럼의 조건이 있다면 스토리지 엔진으로 전달할 수 있게 하는 설정이다.
Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using index condition&lt;/code&gt;이 출력된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스 확장 : 세컨더리 인덱스에 자동으로 추가된 PK를 활용할 수 있게 할지를 결정하는 옵션이다. 이 옵션이 켜지면 PK가 세컨더리 인덱스에 포함돼 있으므로 
정렬 작업도 이를 통해 처리한다. (OrderBy시 덕분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using filesort&lt;/code&gt;가 출력되지 않는다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스 머지 : 인덱스 머지를 사용하면 하나의 테이블에 대해서 2개 이상의 인덱스를 이용해서 쿼리를 처리하게 할 수 있다. 원래는 WHERE에 조건이 여러 개 있어도
인덱스에 포함된 컬럼에 대한 조건만 인덱스를 검색하고 나머지는 레코드에 대해서 체크하는 형태로만 사용된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;index_merge_intersection : 두 개 이상의 인덱스를 사용해서 쿼리를 처리하기로 결정한 경우 (인덱스의 교집합을 반환) Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using intersection&lt;/code&gt; 반환&lt;/li&gt;
  &lt;li&gt;index_merge_union : 인덱스를 이용하되 OR 연산자로 결합된 경우에 하는 최적화. Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using union&lt;/code&gt; 표기&lt;/li&gt;
  &lt;li&gt;index_merge_sort_union : 집합의 중복을 제거하기 위해서 정렬된 결과를 필요로 하는 경우 Sort union 알고리즘을 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;세미-조인&quot;&gt;세미 조인&lt;/h4&gt;
&lt;p&gt;실제 조인을 수행하는 것이 아니라 다른 테이블에 조건에 일치하는 레코드가 있는지 없는지만 체크하는 형태의 쿼리를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;semi-join&lt;/code&gt;이라고 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;semi-join
    &lt;ul&gt;
      &lt;li&gt;세미 조인 최적화(Table Pull-out, Duplicate Weed-out, First Match, Loose Scan, Materialization)&lt;/li&gt;
      &lt;li&gt;IN-to-EXISTS 최적화&lt;/li&gt;
      &lt;li&gt;MATERIALIZATION 최적화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;anti semi-join
    &lt;ul&gt;
      &lt;li&gt;IN-to-EXISTS 최적화&lt;/li&gt;
      &lt;li&gt;MATERIALIZATION 최적화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;table-pull-out&quot;&gt;Table Pull-out&lt;/h5&gt;
&lt;p&gt;세미 조인의 서브쿼리에 사용된 테이블을 아우터 쿼리로 빼내고 조인으로 재작성하는 형태의 최적화이다. Table pullout은 Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using table pullout&lt;/code&gt;이 출력되지는 않는다.
대신 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW WARNINGS&lt;/code&gt;로 재작성한 쿼리를 확인하는 것으로 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;세미 조인 서브쿼리에만 사용 가능&lt;/li&gt;
  &lt;li&gt;서브 쿼리 부분이 UNIQUE 인덱스, PK 룩업으로 결과가 1건인 경우에만 사용 가능&lt;/li&gt;
  &lt;li&gt;만약 서브쿼리의 모든 테이블을 아우터로 빼낼 수 있다면 서브쿼리는 사라진다.&lt;/li&gt;
  &lt;li&gt;table pullout은 서브쿼리는 조인으로 바꿀 수 있다면 바꾸라는 가이드를 그대로 따르는 최적화 방법이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;firstmatch&quot;&gt;FirstMatch&lt;/h5&gt;
&lt;p&gt;IN 형태의 세미 조인을 EXISTS(subquery) 형태로 튜닝한 것과 비슷한 방법으로 실행된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FirstMatch([tableName])&lt;/code&gt;이라는 문구가 출력된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;여러 테이블이 조인되는 경우 원래 쿼리에는 없던 동등 조건을 옵티마이저가 자동으로 추가하는 형태의 최적화가 실행되기도 한다. FirstMatch는 조인 형태로 처리되기
때문에 서브쿼리 뿐만 아니라 아우터 쿼리의 테이블까지 전파될 수 있다.&lt;/li&gt;
      &lt;li&gt;FirstMatch는 서브 쿼리의 모든 테이블에서 FirstMatch를 수행할지 아니면 일부 테이블에 대해서만 수행할지 취사 선택할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제한 사항 및 특징
    &lt;ul&gt;
      &lt;li&gt;FirstMatch는 단축실행경로(ShortCutPath)이기 때문에 FirstMatch 최적화에서 서브 쿼리는 그 서브쿼리가 참조하는 모든 아우터 테이블이 먼저 조회된 이후에 실행된다.&lt;/li&gt;
      &lt;li&gt;Extra에 FirstMatch(table-N)이 표시된다.&lt;/li&gt;
      &lt;li&gt;상관 서브 쿼리(Correlated Subquery)에서도 사용될 수 있다.&lt;/li&gt;
      &lt;li&gt;GroupBY나 집합 함수가 사용된 서브쿼리의 최적화에는 사용될 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;loosescan&quot;&gt;LooseScan&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using index for group-by&lt;/code&gt;의 루스 인덱스 스캔과 비슷한 읽기 방식을 사용한다. Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LooseScan&lt;/code&gt;이라는 문구가 표시된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LooseScan은 서브쿼리 테이블을 looseScan으로 읽고 아우터 테이블을 드리븐으로 사용해서 조인을 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;materialization&quot;&gt;Materialization&lt;/h5&gt;
&lt;p&gt;세미 조인에 사용된 서브쿼리를 통쨰로 구체화해서 쿼리를 최적화한다. 즉, 내부 임시 테이블을 생성한다는 것을 의미한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select_type&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MATERIALIZED&lt;/code&gt;를 표기한다.
Materialization에도 몇 가지 제한 사항과 특징이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;IN(subquery)에서 서브쿼리는 상관 쿼리가 아니어야 한다. (상관 쿼리란 부모-자신 간의 일정 관계를 맺는 경우를 의미한다.)&lt;/li&gt;
  &lt;li&gt;서브 쿼리는 GROUP BY, 집합 함수들이 사용되도 구체화가 가능하다.&lt;/li&gt;
  &lt;li&gt;구체화가 되면 내부 임시 테이블을 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;duplicatedweed-out&quot;&gt;DuplicatedWeed-out&lt;/h5&gt;
&lt;p&gt;세미조인 서브쿼리를 일반적인 INNER JOIN으로 바꾸고 마지막에 중복된 레코드를 제거하는 방법으로 처리하는 최적화 알고리즘이다. 실제로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duplicate Weedout&lt;/code&gt;
은 INNER JOIN + GROUP BY 절로 바꿔서 실행하는 것과 동일한 작업으로 쿼리를 처리한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duplicate Weedout&lt;/code&gt;이라는 문구가 별도 표기되지는 않지만
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start temporary&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;End temporary&lt;/code&gt;가 표기된다. JOIN, 저장 하는 과정에서 발생하는 일이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상관 서브쿼리라고 해도 할 수 있는 최적화다.&lt;/li&gt;
  &lt;li&gt;GROUP BY나 집합 함수가 사용된 경우 불가능하다.&lt;/li&gt;
  &lt;li&gt;Duplicate Weedout은 서브쿼리의 테이블을 조인으로 처리하기 때문에 최적화할 수 있는 방법이 많다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;conditionfanout&quot;&gt;ConditionFanout&lt;/h5&gt;
&lt;p&gt;조인 실행 시 테이블 순서는 쿼리의 성능에 큰 영향을 미친다. MySQL 옵티마이저는 여러 테이블이 조인되는 경우 가능하다면 일치하는 레코드 건수가 적은 순서대로
조인을 행한다. 이러기 위해서 조인을 위한 레코드 건수를 추정해야만 한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition_fanout_filter&lt;/code&gt;가 활성화되면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;WHERE 조건절에 사용된 컬럼에 대해 인덱스가 있는 경우&lt;/li&gt;
  &lt;li&gt;WHERE 조건절에 사용된 컬럼에 대해서 히스토그램이 존재하는 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;레코드 비율을 계산할 수 있다. 이를 통해서 분포 값을 살펴보고 filtered 수치를 예측한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;옵티마이저는 Index 통계 정보 뿐만 아니라&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;레인지 옵티마이저를 이용한 예측&lt;/li&gt;
    &lt;li&gt;히스토그램을 이용한 예측&lt;/li&gt;
    &lt;li&gt;인덱스 통계를 이용한 예측&lt;/li&gt;
    &lt;li&gt;추측에 기반한 예측
을 사용할 수도 있다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;derivedmerge&quot;&gt;DerivedMerge&lt;/h5&gt;
&lt;p&gt;과거에는 FROM 절에 사용된 서브쿼리는 먼저 실행해서 임시테이블로 만든 다음 외부 쿼리 부분을 처리했다. 그래서 FROM 절에 사용된 서브쿼리를 파생 테이블(Derived Table)
이라고 부른다. 내부적으로 생성되는 임시 테이블은 처음에는 메모리에 생성되지만, 임시 테이블에 저장될 레코드 건수가 많아지면 결국 디스크로 다시 기록돼야 한다.
그래서 임시 테이블이 메모리에 올릴 만큼 크기가 작으면 상관 없지만 그렇지 않으면 레코드를 복사고 읽는 오버헤드로 쿼리 성능은 많이 느려질 것이다.&lt;/p&gt;

&lt;p&gt;5.7 버전부터 파생 테이블로 만들어지는 서브쿼리를 외부 쿼리와 병합해서 서브 쿼리 부분을 제거하는 최적화가 도입됐다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;derived_merge&lt;/code&gt; 최적화 옵션을 활성화하면
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select_type&lt;/code&gt;에서 DERIVED가 사라지고 서브쿼리 없이 단순 실행 계획으로 변경된다. 그러나&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SUM(), MAX(), MIN() 같은 집계 함수와 윈도우 함수가 사용된 서브쿼리&lt;/li&gt;
  &lt;li&gt;DISTINCT가 사용된 서브쿼리&lt;/li&gt;
  &lt;li&gt;GROUP BY, HAVING이 사용된 서브쿼리&lt;/li&gt;
  &lt;li&gt;LIMIT이 사용된 서브쿼리&lt;/li&gt;
  &lt;li&gt;UNION, UNION ALL이 사용된 서브쿼리&lt;/li&gt;
  &lt;li&gt;SELECT 절에 사용된 서브쿼리&lt;/li&gt;
  &lt;li&gt;값이 변경되는 사용자 변수가 사용된 서브쿼리&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;의 경우에는 외부 쿼리로 병합을 할 수 없다. 따라서 웬만하면 병합해서 작성하는 것이 좋다.&lt;/p&gt;

&lt;h5 id=&quot;invisibleindex&quot;&gt;InvisibleIndex&lt;/h5&gt;

&lt;p&gt;인덱스를 삭제하지 않고 사요하지 못하게 해야하는 경우도 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALTER TABLE ... ALTER INDEX [ VISIBLE| INVISIBLE ]&lt;/code&gt;로 가용 상태를 변경할 수 있다.&lt;/p&gt;

&lt;h5 id=&quot;skipscan&quot;&gt;SkipScan&lt;/h5&gt;

&lt;p&gt;인덱스는 정렬돼 있다는게 핵심이다. (A, B, C)로 인덱스를 잡으면 A정렬, B는 A에 대해 정렬, C는 B에 대한 정렬이 된다. WHERE에 B,C 조건만 있다면 인덱스를
활용할 수 없다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SkipScan&lt;/code&gt;은 제한적이긴 하지만 이 제약 사항을 뛰어넘을 수 있는 최적화 기법이다.&lt;/p&gt;

&lt;p&gt;8.0부터는 후행 칼럼 조건만으로도 인덱스를 이용한 쿼리 성능 개선이 가능하다. 그래서 선행 컬럼이 소수의 유니크한 값을 가질 때만 인덱스 스킵스캔 최적화를 사용한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;세션에서 활성화
SET optimizer_switch=’skip_scan=on’;&lt;/p&gt;

  &lt;p&gt;특정 테이블에 대해서 활성화
SELECT /** SKIP_SCAN() &lt;em&gt;/ COUNT(&lt;/em&gt;)….&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h4 id=&quot;해시-조인&quot;&gt;해시 조인&lt;/h4&gt;
&lt;p&gt;해시 조인이 8.0.18부터 추가 됐다. NestedLoopJoin 보다 HashJoin이 더 빨라 보이지만 항상 그런건 아니다. 잠시 간단히 정리하면
nestedLoop은 2중 for를 사용했다고 생각하면 되고, hash는 map으로 정리하고 for로 순회하면 꺼내 쓰는 방식이다.&lt;/p&gt;

&lt;p&gt;성능에 대해서 살펴보면 nested가 첫번째 레코드를 먼저 찾지만 중첩 for를 도느라 실행 기간이 길게 들어 더 늦게 끝난다. hash는 해시 작업이 필요하기에 첫 번째
레코드를 찾는게 더 느리다 그러나 중첩 작업이 없어서 더 빨리 끝난다.&lt;/p&gt;

&lt;p&gt;결론적으로 해시 조인은 최고 스루풋(BestThroughput)에 적합하며, 네스티드 루프 조인은 최고 응답 속도(Best Response-time) 전략에 적합하다는 것을 알 수 있다.
그래서 조인 조건의 컬럼이 인덱스가 없거나 조인 대상 테이블 중 일부의 레코드 건수가 매우 적은 경우 등에 대해서만 해시 조인 알고리즘을 사용하도록 설계돼 있다.
즉 해시 조인 최적화는 네스티드 루프 조인이 사용되기에 적합하지 않은 경우를 위한 차선책 정도로 보는게 좋다. 최적화되면 Extra에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash join&lt;/code&gt;을 확인할 수 있다.&lt;/p&gt;

&lt;h5 id=&quot;과정&quot;&gt;과정&lt;/h5&gt;
&lt;p&gt;해시 조인은 build, probe로 나뉜다. build는 해시 테이블로 만들기 용이한 테이블을 골라서 메모리에 빌드하는 작업을 한다. probe는 나머지 테이블의 레코드를 읽어서
해시 테이블의 일치 레코드를 찾는 과정을 의미한다. build에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join_buffer_size&lt;/code&gt;로 크기를 제어할 수 있는 조인 버퍼를 사용한다. 이 크기보다 테이블이 크다면
나머지 레코드를 디스크에 청크로 구분해서 저장한다. 조인 후 청크를 다시 빌드해서 이 작업을 진행한다.&lt;/p&gt;

&lt;p&gt;메모리에서 빌드가 모두 가능하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Classic hash join&lt;/code&gt;을 사용하고, 그렇지 않으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Grace hash join&lt;/code&gt;을 하이브리드하게 활용하도록 구현돼 있다.&lt;/p&gt;

&lt;h4 id=&quot;인덱스-정렬-선호&quot;&gt;인덱스 정렬 선호&lt;/h4&gt;
&lt;p&gt;MySQL 옵티마이저는 ORDER BY, GROUP BY를 인덱스를 사용해 처리 가능한 경우 쿼리의 실행 계획에서 이 인덱스 가중치를 높게 설정해서 실행된다. 
그러나 항상 인덱스를 사용하는게 옳은건 아니다. 레코드 건수가 상당히 많은데도 인덱스 활용으로 가닥을 잡는 경우가 있다. 옵티마이저가 잘못된 실행 계획을 선택했을
가능성이 높다. 이 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IGNORE INDEX&lt;/code&gt; 힌트를 사용하면 된다. 8.0.21부터는 ORDER BY를 위한 인덱스에 너무 가중치를 부여하지 않도록 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefer_ordering_index&lt;/code&gt;
라는 옵티마이저 옵션이 추가됐다.&lt;/p&gt;

&lt;h3 id=&quot;조인-최적화-알고리즘&quot;&gt;조인 최적화 알고리즘&lt;/h3&gt;
&lt;p&gt;조인 쿼리의 실행 계획 최적화를 위한 알고리즘이 2개 있다.&lt;/p&gt;

&lt;h4 id=&quot;1-exhaustive-완전-탐색&quot;&gt;1. Exhaustive (완전 탐색)&lt;/h4&gt;
&lt;p&gt;모튼 테이블 조합에 대해서 실행 계획의 비용을 계산해서 최적의 조합 1개를 찾는 방법이다.&lt;/p&gt;

&lt;h4 id=&quot;2-greedy-탐욕법&quot;&gt;2. Greedy (탐욕법)&lt;/h4&gt;
&lt;p&gt;각 단계에서 최적의 조건을 선택해 나가는 방법이다.&lt;/p&gt;

&lt;p&gt;조인 최적화를 위한 변수로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optimizer_prune_level&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optimizer_search_depth&lt;/code&gt;가 제공된다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optimizer_search_depth&lt;/code&gt;는 Greedy, Exhaustive 검색 알고리즘 중에서 어떤 알고리즘을 사용할지 결정하는 시스템 변수다. 조인에 사용된 테이블의 개수가
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optimizer_search_depth&lt;/code&gt;보다 크면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optimizer_search_depth&lt;/code&gt;만큼 Exhaustive가 되고 나머지는 Greedy가 진행된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Heuristic 검색이 작동하는 방식을 제어한다. Heuristic은 다양한 조인 순서의 비용을 계산하는 도중 이미 계산했던 조인 순서의 비용보다 큰 경우 언제든지 중간에 포기할 수 있다는 것이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;쿼리-힌트&quot;&gt;쿼리 힌트&lt;/h2&gt;
&lt;p&gt;시간이 갈수록 통계정보, 옵티마이저의 최적화 방법들이 더 다양해지면서 쿼리의 실행 계획 최적화가 성숙해지고 있다. 그럼에도 아직 개입할 여지가 많다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;인덱스 힌트&lt;/li&gt;
  &lt;li&gt;옵티마이저 힌트&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;인덱스-힌트&quot;&gt;인덱스 힌트&lt;/h3&gt;

&lt;p&gt;인덱스 힌트는 ANSIBLE하지 않다. 그래서 인덱스 힌트보다는 옵티마이저 힌트 사용이 더 추천된다. 또한, 인덱스 힌트는 SELECT, UPDATE에만 사용할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;straight_join&quot;&gt;STRAIGHT_JOIN&lt;/h4&gt;
&lt;p&gt;SELECT, UPDATE, DELETE 쿼리에서 여러 개의 테이블이 조인되는 경우 조인 순서를 고정하는 역할을 한다.&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;EXPLAIN
SELECT /*! STRAIGHT_JOIN */ *
FROM employee e, dept_emp de, departments d
WHERE e.emp_no=de.emp_no AND d.dept_no=de.dept_no;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아래의 경우에만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRAIGHT_JOIN&lt;/code&gt;으로 조인 순서를 조정하는 것이 좋다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;임시 테이블과 일반 테이블의 조인 : 보통 임시테이블을 드라이빙으로 두는 것이 좋다. 일반 테이블에 인덱스가 없다면 레코드가 적은 쪽을 드라이빙을 두는 것이 좋다.&lt;/li&gt;
  &lt;li&gt;임시 테이블 간 조인 : 항상 인덱스가 없기에 레코드가 적은 테이블을 드라이빙으로 선택하자&lt;/li&gt;
  &lt;li&gt;일반 테이블 간 조인 : 양쪽 모두 인덱스가 있으면 레코드가 적은 것을 드라이빙으로 둘 중 하나만 있다면 인덱스가 없는 테이블을 드라이빙으로 두는 것이 좋다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;STRAIGHT_JOIN과 비슷한 역할을 하는 옵티마이저 힌트는&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JOIN_FIXED_ORDER&lt;/li&gt;
  &lt;li&gt;JOIN_ORDER&lt;/li&gt;
  &lt;li&gt;JOIN_PREFIX&lt;/li&gt;
  &lt;li&gt;JOIN_SUFFIX&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;use-index-force-index-ignore-index&quot;&gt;USE INDEX/ FORCE INDEX/ IGNORE INDEX&lt;/h4&gt;
&lt;p&gt;인덱스 힌트는 사용하려는 인덱스를 가지는 테이블 뒤에 힌트를 명시해야 한다. 강제로 특정 인덱스를 사용하도록 하는 역할을 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;USE INDEX : 옵티마이저에게 특정 테이블의 인덱스를 사용하도록 권장하는 정도&lt;/li&gt;
  &lt;li&gt;FORCE INDEX : USE INDEX 보다 더 강하다.&lt;/li&gt;
  &lt;li&gt;IGNORE INDEX : 특정 인덱스를 사용하지 못하게 하는 용도로 사용한다. 풀스캔을 유도하도록 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;추가로 용도를 명시할 수도 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;USE INDEX FOR JOIN&lt;/li&gt;
  &lt;li&gt;USE INDEX FOR ORDER BY&lt;/li&gt;
  &lt;li&gt;USE INDEX FOR GROUP BY&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;옵티마이저-힌트&quot;&gt;옵티마이저 힌트&lt;/h3&gt;
&lt;p&gt;옵티마이저 힌트는 영향 범위에 따라 4개의 그룹으로 나눌 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스 : 특정 인덱스의 이름을 사용할 수 있는 옵티마이저 힌트&lt;/li&gt;
  &lt;li&gt;테이블 : 특정 테이블의 이름을 사용할 수 있는 옵티마이저 힌트&lt;/li&gt;
  &lt;li&gt;쿼리 블록 : 특정 쿼리 블록에 사용할 수 있는 옵티마이저 힌트&lt;/li&gt;
  &lt;li&gt;글로벌(쿼리 전체) : 쿼리 전체에 대해서 영향을 미치는 힌트&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;힌트 이름&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설명&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;영향&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;MAX_EXECUTION_TIME&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;실행 시간 제한&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;글로벌&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SET_VAR&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 실행을 위한 시스템 변수 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;글로벌&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SUBQUERY&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;세미 조인 최적화(Materilization, intoExists) 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;BKA, NO_BKA&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;BKA(Batched Key Access) 조인 사용 여부 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록, 테이블&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;BNL, NO_BNL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;블록 네스티드 루프 조인 사용 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록, 테이블&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DERIVED_CONDITION_PUSHDOWN&lt;br /&gt;NO_DERIVED_CONDITION_PUSHDOWN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;외부 쿼리의 조건을 서브 쿼리로 옮기는 최적화 사용 여부 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록, 테이블&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;HASH_JOIN&lt;br /&gt;NO_HASH_JOIN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;해시 조인 사용 여부 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록, 테이블&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JOIN_FIXED_ORDER&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FROM절에 명시된 순서대로 조인 실행&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JOIN_ORDER&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;힌트에 명시된 테이블 순서대로 조인 실행&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JOIN_PREFIX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;힌트에 명시된 테이블을 조인의 드라이빙 테이블로 조인 실행&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JOIN_SUFFIX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;힌트에 명시된 테이블을 조인의 드리븐 테이블로 조인 실행&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SEMIJOIN, NO_SEMIJOIN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;서브 쿼리 세미 조인 최적화(DuplicateWeedOut, FirstMatch, LooseScan, Materialization) 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쿼리 블록&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;MERGE, NO_MERGE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FROM절 서브쿼리, 뷰를 외부 쿼리로 병합하는 최적화&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;테이블&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INDEX_MERGE, NO_INDEX_MERGE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스 병합 실행 계획 사용 여부 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;테이블, 인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;MRR, NO_MRR&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Multi-Range Read 사용 여부 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;테이블, 인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NO_ICP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스 컨디션 푸시 다운 최적화 전략 사용 여부 제어      (사용 못하는 인덱스도 스토리지로 전달)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;테이블, 인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NO_RANGE_OPTIMIZATION&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스 레인즈 액세스 비활성화&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;테이블, 인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SKIP_SCAN, NO_SKIP_SCAN&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스 스킵 스캔 사용 여부 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;테이블, 인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;INDEX, NO_INDEX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GROUP BY, ORDER BY, WHERE에서 인덱스 사용 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GROUP_INDEX, NO_GROUP_INDEX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GROUP BY에서 인덱스 사용 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JOIN_INDEX, NO_JOIN_INDEX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;WHERE 절 인덱스 사용 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ORDER_INDEX, NO_ORDER_INDEX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ORDER BY 인덱스 사용 제어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Thu, 25 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[mysql Summary Series] 06.index</title>
        <link>/mysql/summary/2024/07/25/mysql-summary-series-06.Index.html</link>
        <guid isPermaLink="true">/mysql/summary/2024/07/25/mysql-summary-series-06.Index.html</guid>
        <description>&lt;h1 id=&quot;index&quot;&gt;Index&lt;/h1&gt;

&lt;p&gt;SQL 성능은 여러 가지 요소가 결합된 결과이겠지만 Disk I/O와 밀접한 연관이 있다. 특히 종류에 따라 Sequential, Random I/O의 성격도 달라지고
속도도 달라진다. 보통 쿼리 튜닝은 이 I/O를 줄이는데 큰 목적을 둔다.&lt;/p&gt;

&lt;p&gt;인덱스는 책 뒤쪽 색인 페이지와 유사하다. 우리는 색인으로 모든 페이지를 순회하지 않고 원하는 내용을 찾을 수 있다. 물론 이 색인이 만능은 아니다.
미리 정렬하고 정리해놓는 과정이 필요하다.&lt;/p&gt;

&lt;p&gt;DBMS에서 인덱스는 이와 같다. INSERT, UPDATE, DELETE의 성능을 조금 포기하더라도 읽기에서 성능을 높이는 기능이다. 인덱스는 관리 방식과 
중복 허용 등에 따라 PrimaryKey, SecondaryKey로 구분할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PK : 레코드를 대표하는 컬럼 값으로 만들어진 인덱스. 식별자라고 부른다.&lt;/li&gt;
  &lt;li&gt;SK : PK를 제외한 나머지 모든 인덱스 (유니크는 PK를 대체할 수 있다고 해서 대체 키라고도 부른다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;알고리즘으로 분류하면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;B-Tree : 일반적 알고리즘 컬럼 값 변형 없이 인덱싱한다.&lt;/li&gt;
  &lt;li&gt;Hash : 컬럼 값으로 해시 값을 계산하는 알고리즘 (전방 일치등으로 검색 불가)&lt;/li&gt;
  &lt;li&gt;Fractal-Tree&lt;/li&gt;
  &lt;li&gt;Merge-Tree&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;등이 있다.&lt;/p&gt;

&lt;h2 id=&quot;b-tree&quot;&gt;B-Tree&lt;/h2&gt;

&lt;p&gt;B 트리의 B는 Balanced라고 한다. 원래 값 변형 없이 인덱스 구조체 내에서는 항상 정렬된 상태로 유지된다.&lt;/p&gt;

&lt;p&gt;루트 노드가 존재하고 자식 노드가 붙여있는 형태다. (브랜치 노드 + 리프 노드) 리프 노드는 실제 데이터 레코드의 주소 값을 가지고 있다. 
여기서 인덱스는 정렬되어 있지만 레코드는 정렬되어 있지 않다. (InnoDB에서는 PK 순서로 정렬되어 저장된다. -&amp;gt; 클러스터링 영향이 있다.)&lt;/p&gt;

&lt;h3 id=&quot;추가&quot;&gt;추가&lt;/h3&gt;
&lt;p&gt;TableStorageEngine에 따라 새로운 키 값이 인덱스에 저장될 수도 있고 아닐 수도 있다. B-Tree라면 적절한 위치를 찾아서 정하는 과정이 필요하다.
혹여나 리프 노드가 꽉 차면 리프 노드가 분리되고 이는 상위 노드로도 전파될 수 있다. 그렇기 때문에 인덱스 추가 작업에 비용이 크다.&lt;/p&gt;

&lt;p&gt;InnoDB는 지연처리를 기본으로 한다. 물론 PK, UQ는 중복 체크가 필요하므로 즉시 B-Tree를 수정한다.&lt;/p&gt;

&lt;h3 id=&quot;삭제&quot;&gt;삭제&lt;/h3&gt;
&lt;p&gt;간단하다. 리프 노드를 찾아 삭제 마킹으로 끝낸다. 이 부분 역시 지연처리가 가능하다.&lt;/p&gt;

&lt;h3 id=&quot;변경&quot;&gt;변경&lt;/h3&gt;
&lt;p&gt;변경은 불가능하다. 삭제 -&amp;gt; 추가 순으로 진행된다. InnoDB를 사용한다면 위 작업 모두 체인지 버퍼를 이용해서 지연 처리된다.&lt;/p&gt;

&lt;h3 id=&quot;검색&quot;&gt;검색&lt;/h3&gt;
&lt;p&gt;루트 노드부터 조건에 맞는 노드로 트리 탐색을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;중요성&quot;&gt;중요성&lt;/h3&gt;
&lt;p&gt;InnoDB 인덱스는 꽤 중요하다. 레코드 잠금, 넥스트 키락(갭락)을 할 때 인덱스를 잠그고 레코드를 잠그는 방식으로 구현되어 있다. 따라서 
Update, Delete에서도 인덱스가 없으면 심하면 모든 레코드를 잠글 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;크기&quot;&gt;크기&lt;/h3&gt;
&lt;p&gt;InnoDB는 디스크에 데이터를 저장하는 기본 단위를 Page 혹은 Block으로 한다. 읽기/쓰기의 최소 단위가 된다. 또한 버퍼 풀에서 데이터 버퍼링 기본 단위가
되기도 한다. B-Tree에서 자식 노드를 가질 수 있는 수 역시 인덱스의 페이지 크기와 키 값의 크기에 따라 결정된다. 인덱스 키 값이 커지면 여러 번 인덱스
페이지를 읽게 되고 I/O 횟수가 늘면서 느려질 수 있다. 또한 인덱스 크기가 커질수록 메모리에 캐시해 둘 수 있는 레코드 수가 줄어든다.&lt;/p&gt;

&lt;h3 id=&quot;깊이&quot;&gt;깊이&lt;/h3&gt;
&lt;p&gt;B-Tree 깊이는 Random I/O 횟수와 직결된다. 이 역시 키 값의 크기에 따라 좌우된다.&lt;/p&gt;

&lt;h3 id=&quot;cardinality&quot;&gt;Cardinality&lt;/h3&gt;
&lt;p&gt;Cardinality가 높으면 중복도가 낮게 되고, 검색 대상을 효율적으로 좁힐 수 있게 된다. 이는 성능에 영향을 미친다.&lt;/p&gt;

&lt;h3 id=&quot;scan&quot;&gt;Scan&lt;/h3&gt;
&lt;p&gt;인덱스를 거치지 않고 레코드를 읽는 작업은 비용이 큰 작업이다. 예를 들어 100건을 다 읽고 50만 건을 버릴지  인덱스를 통해 50만건만 읽을지는 
천지차이다.
물론 인덱스를 통해서 읽어야 할 레코드 건수가 전체 레코드의 20 ~ 25%를 초과하면 인덱스를 이용하지 않는게 효율적일 수도 있다.&lt;/p&gt;

&lt;h4 id=&quot;range&quot;&gt;Range&lt;/h4&gt;
&lt;p&gt;인덱스 레인지 스캔은 검색해야할 인덱스의 범위가 결정됐을 때 사용하는 방식이다. 인덱스가 정렬되어 있다는 특징을 이용해서 필요한 부분을 추려서 
Disk I/O를 발생시킨다. 이 부분은 랜덤이다.  위에서 20 ~ 25%가 넘으면 비효율이라고 한 것이 풀스캔을 하면 순차 읽기가 된다. 따라서 
인덱스 -&amp;gt; 데이터보다. 데이터 풀 스캔이 저렴할 수 있다.&lt;/p&gt;

&lt;p&gt;여튼 레인지 스캔을 자세히 살펴보면&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;인덱스에서 조건메 만족하는 값이 저장된 위치를 찾는다( 인덱스 탐색 )&lt;/li&gt;
  &lt;li&gt;1에서 찾은 부분부터 필요한 만큼 읽는다.( 인덱스 탐색 )&lt;/li&gt;
  &lt;li&gt;2번에 읽은 인덱스 키-레코드 주소로 레코드가 저장된 페이지를 읽고 최종 레코드를 읽는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3번은 커버링 인덱스로 처리되면 디스크의 레코드를 읽지 않아도 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;커버링 인덱스: 쿼리를 충족시키는데 필요한 모든 데이터를 갖고 있는 인덱스&lt;/li&gt;
  &lt;/ul&gt;

&lt;/blockquote&gt;

&lt;h4 id=&quot;fullscan&quot;&gt;FullScan&lt;/h4&gt;
&lt;p&gt;인덱스를 사용하긴하지만 처음부터 끝까지 모두 읽는 방식을 풀 스캔이라고 한다. 예를 들어 인덱스가 (A, B, C) 컬럼으로 설정됐는데 검색 조건이
(B, C)인 경우가 이 예에 해당한다.&lt;/p&gt;

&lt;p&gt;쿼리가 인덱스에 명시된 컬럼만으로 조건을 처리할 수 있는 경우 이 방식이 채택된다. 레코드까지 읽어야 한다면 절대 이 방식으로 처리되지 않는다.&lt;/p&gt;

&lt;h4 id=&quot;loose-scan&quot;&gt;Loose Scan&lt;/h4&gt;
&lt;p&gt;인덱스 스킵 스캔과 비슷하다. 위의 두 스캔은 tight 스캔으로 분류된다.  루스 인덱스 스캔은 말 그대로 느슨하게 인덱스를 읽는 것을 의미한다.
중간에 필요치 않은 인덱스 키 값은 무시하고 다음으로 넘어가는 형태로 처리된다.&lt;/p&gt;

&lt;p&gt;예시)&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emp_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept_emp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept_no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'d002'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'d004'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 첫 번쨰 emp_no만 읽으면 되기 떄문에 between을 모두 검색할 필요가 없기에 옵티아마이저가 만족하지 않는 레코드는 무시한다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;skip-scan&quot;&gt;Skip Scan&lt;/h4&gt;
&lt;p&gt;인덱스의 핵심은 값이 정렬되어 있다는 것이다. 때문에 인덱스 구성하는 컬럼 순서가 중요하다.
예를 들어 인덱스가 (A, B)로 잡혀있고 where에 B만으로 검색하면 A로 정렬 -&amp;gt; B로 정렬 순이기 떄문에 인덱스를 사용하지 못했다. 따라서 인덱스를
사용하려면 A, B 에 대해서 순서대로 조건이 있어야만 했다.&lt;/p&gt;

&lt;p&gt;8.0에서는 컬럼을 건너뛰어서 B만으로 인덱스 검색이 가능하게 해주는 SkipScan이 도입됐다. 일전에는 B만으로 검색하면 Index FullScan을 동반했다.
이후에는 이를 range로 처리한다. 또한 Extra에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Using index for skip scan&lt;/code&gt;이 명시된다.&lt;/p&gt;

&lt;p&gt;내부적으로 어떻게 처리는지 보면 A가 있다고 가정하고 쿼리를 여러 번 실행해서 rangeScan을 만드는 식으로 최적화를 시도한다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 여기서 맹점은 A(선행 컬럼)의 값이 유니크한 개수가 많으면 쿼리 개수가 늘어나서 비효율이 된다는 점, 쿼리가 커버링 인덱스로 처리되어야 한다는
점이 있다. 만일 인덱스에 명시된 내용이 아닌 다른 부분 (* 같은)도 호출하면 결국 인덱스 스킵 스캔을 사용하지 못하고 풀 테이블 스캔을 초래하게 한다.&lt;/p&gt;

&lt;h3 id=&quot;multicolumn&quot;&gt;MultiColumn&lt;/h3&gt;
&lt;p&gt;실제 사용에서는 인덱스에 하나의 컬럼만을 잡는 경우는 드물다. 다중 컬럼 인덱스(Concatenated Index)라고 한다. 특징은 컬럼 순서에 맞춰서
뒤쪽 순서 컬럼은 앞쪽 컬럼에 의존해서 정렬되어 있다는 것이 특징이다.&lt;/p&gt;

&lt;h3 id=&quot;스캔-방향&quot;&gt;스캔 방향&lt;/h3&gt;

&lt;p&gt;인덱스는 오름/ 내림 차순으로 정렬할 수 있다. 논리적으로는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ASC  : 작은 인덱스 키가 B-Tree 왼쪽으로 정렬&lt;/li&gt;
  &lt;li&gt;DESC : 큰 인덱스 키가 B-Tree 왼쪽으로 정렬&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이다. 스캔을 살펴보면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;FORWARD  : 인덱스 리프 노드의 왼쪽 페이지부터 오른쪽으로 스캔&lt;/li&gt;
  &lt;li&gt;BACKWARD : 인덱스 리프 노드의 오른쪽 페이지부터 왼쪽으로 스캔&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;사실 별 차이가 없어 보인다. InnoDB에는 페이지 블록 간의 DoubleLinekdList를 앞으로 순회하냐, 뒤로 순회하냐의 차이로 보인다.
그러나 실제로 내부적으로 역순 스캔이 정순 스캔보다 느리다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;페이지 잠금이 인덱스 정순 스캔에 적합&lt;/li&gt;
  &lt;li&gt;페이지 내에서 인덱스 레코드가 단방향으로만 연결된 구조&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;효율성과-가용성&quot;&gt;효율성과 가용성&lt;/h3&gt;

&lt;p&gt;WHERE, GROUP BY, ORDER BY가 어떤 경우에 인덱스를 사용할 수 있고, 어떻게 사용하는지를 알아야 쿼리를 최적화할 수 있다. 역으로 쿼리에 맞게
인덱스를 설계할 수 있다.&lt;/p&gt;

&lt;p&gt;예시로 동등(=)인지 크다(&amp;gt;)인지 작다(&amp;lt;)인지에 따라서 인덱스 활용 형태가 달라지며, 효율도 달라진다. 또한, WHERE의 순서에 따라서도 인덱스 활용 정도가 달라진다.&lt;/p&gt;

&lt;h4 id=&quot;효율성&quot;&gt;효율성&lt;/h4&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept_emp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept_no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'d0002'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- A (dept_no, emp_no)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- B (emp_no, dept_no)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;라고 하면 같은 쿼리라고 해도 A는 ` dept_no=’d0002’ AND emp_no &amp;gt;= 10114`인 레코드를 찾고 dept_no가 d0002가 아닐 때까지 읽으면 된다.
emp_no가 dept_no에 의존해서 정렬되어 있으니 dept_no에서 d0002 내부에서 emp_no가 순서대로 정렬되어 있다.&lt;/p&gt;

&lt;p&gt;B는  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emp_no &amp;gt;= 10114 AND dept_no='d0002'&lt;/code&gt;로 찾고 dept_no를 매 번 비교해야 한다. emp_no가 순서대로 정렬되어 있고 emp_no가 같은 경우
dept_no가 순서대로 정렬되어 있기 때문이다.&lt;/p&gt;

&lt;p&gt;A와 같이 인덱스가 작업 범위를 결정하는 경우 작업 범위 결정 조건이라고 한다. B의 경우 비교 작업 범위를 줄이지 못하고 필터링만 하기 때문에
필터링 조건이라고 표현한다.&lt;/p&gt;

&lt;h4 id=&quot;가용성&quot;&gt;가용성&lt;/h4&gt;

&lt;p&gt;B-tree는 이전 컬럼에 종속되어 다음 컬럼이 정렬되어있다는 것을 이해하는 것이 중요하다. 여러 컬럼이든 하나든 말이다. (하나면 글자 순서로 생각해도 될 것 같다.)
예를 들어 하나의 인덱스라면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%mer&lt;/code&gt;로 검색하면 왼쪽 부분이 고정되지 않아서 인덱스 효과를 받지 못한다. 여러 컬럼이라면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(a, b)&lt;/code&gt;일 때 a를 검색 조건으로 걸지 않으면
인덱스 효과가 감소한다.&lt;/p&gt;

&lt;h4 id=&quot;판단&quot;&gt;판단&lt;/h4&gt;
&lt;p&gt;아래의 경우는 인덱스를 작업 범위 결정 조건이 아닌 체크 조건으로 사용하는 경우다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;NOT-EQUAL( ‘&amp;lt;&amp;gt;’, ‘NOT IN’, ‘NOT BETWEEN’, ‘IS NOT NULL’ )&lt;/li&gt;
  &lt;li&gt;LIKE ‘%??’&lt;/li&gt;
  &lt;li&gt;STORED FUNCTION, 다른 연산자로 인덱스 변형 후 비교할 경우&lt;/li&gt;
  &lt;li&gt;NOT-DETERMISTIC 속성의 STORED FUNCTION이 비교 조건일 경우( 매 번 새로 연산 )&lt;/li&gt;
  &lt;li&gt;데이터 타입이 다른 비교&lt;/li&gt;
  &lt;li&gt;문자열 데이터 콜레이션이 다른 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;r-tree&quot;&gt;R-Tree&lt;/h2&gt;

&lt;p&gt;공간 확장(Spatial Extension)을 이용하면 필용적으로 R-Tree를 맞닥뜨리게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SpatialExtension&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;공간 데이터를 저장할 수 있는 데이터 타입&lt;/li&gt;
    &lt;li&gt;공간 인덱스 (R-Tree)&lt;/li&gt;
    &lt;li&gt;공간 연산 함수&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;R-Tree는 MBR(Minimum Bounding Rectangle)의 포함 관계를 B-Tree 형태로 구현한 인덱스이다.&lt;/p&gt;

&lt;h3 id=&quot;용도&quot;&gt;용도&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ST_CONTAINS()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ST_WITHIN()&lt;/code&gt; 같이  포함 관계를 비교하는 함수로 검생하는 경우에만 인덱스를 사용할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;fulltext&quot;&gt;FullText&lt;/h2&gt;
&lt;p&gt;문서의 내용 전체를 인덱스화해서 특정 키워드가 포함된 문서를 검색하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FullText&lt;/code&gt; 검색에는 B-Tree를 사용할 수 없다. 이 경우를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FullTextSearch&lt;/code&gt; 인덱스라고 한다.
전문 검색에서는 문서 본문의 내용에서 사용자가 검색하게 될 키워드를 분석해내고, 빠른 검색용으로 사용할 수 있게 이러한 인덱스를 구축한다. 어근분석, n-gram 분석 알고리즘으로
나뉜다.&lt;/p&gt;

&lt;h3 id=&quot;가용성-1&quot;&gt;가용성&lt;/h3&gt;
&lt;p&gt;전문 검색 인덱스를 사용하려면 반드시 두 가지 조건을 갖춰야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;쿼리 문장이 저눔ㄴ 검색을 위한 문법( MATCH … AGAINST …)를 사용한다.&lt;/li&gt;
  &lt;li&gt;테이블이 전문 검색 대상 컬럼에 대해서 전문 인덱스를 보유한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;함수-기반&quot;&gt;함수 기반&lt;/h2&gt;
&lt;p&gt;컬럼 값을 변형해서 만들어진 값에 대해 인덱스를 구축해야할 때도 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;가상 컬럼&lt;/li&gt;
  &lt;li&gt;함수를 이용한 인덱스&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;가상-컬럼&quot;&gt;가상 컬럼&lt;/h3&gt;
&lt;p&gt;8.0부터 가상 컬럼을 추가하고 그 가상 컬럼에 인덱스를 생성할 수 있게 됐다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;ALTER TABLE ~ 
    ADD full_name VARCHAR(30) AS (CONCAT(first_name, ' ', last_name)) VIRTUAL,
    ADD INDEX ix_fullname (full_name);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;함수&quot;&gt;함수&lt;/h3&gt;
&lt;p&gt;5.7에는 함수를 직접 인덱스 생성에서 사용할 수 없었다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;CREATE TABLE ~ (
    user_id BIGINT,
    first_name VARCHAR(10),
    last_name VARCHAR(10),
    ...,
    INDEX ix_fullname ((CONCAT(first_name, ' ', last_name)))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;멀티-밸류&quot;&gt;멀티 밸류&lt;/h3&gt;
&lt;p&gt;multi-value 인덱스는 하나의 데이터 레코드가 여러 개의 키를 가질 수 있는 형태의 인덱스다.&lt;/p&gt;

&lt;h3 id=&quot;클러스터링-인덱스&quot;&gt;클러스터링 인덱스&lt;/h3&gt;
&lt;p&gt;클러스터링이랑 여러 개를 하나로 묶는다는 의미로 주로 사용한다. MySQL은 테이블 레코드를 비슷한 것들끼리 묶어서 저장하는 형태로 구현한다.
클러스터링 인덱스는 테이블의 프라이머리 키에 대해서만 적용되는 내용이다. 위의 설명과 같이 PK를 묶어서 저장하는 것을 클러스터링 인덱스라고 한다. PK에 따라
저장 위치가 결정된다는 것이다. 혹여나 키 값이 변경되면 그 레코드의 물리적인 저장위치가 바뀐다는 의미다. 
그러면 PK가 없는 InnoDB 테이블은 어떻게 클러스터링 테이블이 될까?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PK가 있으면 PK를 클러스터링 키로 선택&lt;/li&gt;
  &lt;li&gt;NOT NULL 옵션의 UQ 중 첫 번째 인덱스를 클러스터링 키로 선택&lt;/li&gt;
  &lt;li&gt;내부적 PK를 추가하고 클러스터링 키로 선택&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;세컨더리-인덱스와의-관계&quot;&gt;세컨더리 인덱스와의 관계&lt;/h3&gt;
&lt;p&gt;SecondaryIndex에도 영향을 미칠 수 있다. InnoDB의 모든 세컨더리 인덱스는 레코드 저장 주소가 아닌 PK 값을 저장하도록 되어 있다.&lt;/p&gt;

&lt;h3 id=&quot;클러스터링-인덱스의-장단점&quot;&gt;클러스터링 인덱스의 장/단점&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;PK를 범위 검색하는 경우 빠름&lt;/li&gt;
      &lt;li&gt;SecondaryIndex가 PK를 가지고 있기에 인덱스만으로 처리될 수 있는 경우가 많다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;SecondaryIndex가 클러스터링 키를 갖기 때문에 클러스터링 키 값의 크기가 클 경우 전체적으로 인덱스의 크기가 커짐&lt;/li&gt;
      &lt;li&gt;SecondaryIndex으로 검색하면 PK로 다시 한 번 검색해야 하므로 처리 성능이 느림&lt;/li&gt;
      &lt;li&gt;INSERT 시 레코드 저장 위치가 결정되기에 처리 성능이 느림&lt;/li&gt;
      &lt;li&gt;PK를 변경할 때 DELETE -&amp;gt; INSERT 해야 하므로 성능이 느림&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;주의-사항&quot;&gt;주의 사항&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;클러스터링 인덱스 키의 크기
    &lt;ul&gt;
      &lt;li&gt;SecondaryIndex가 PK를 포함하므로 PK크기가 커지면 SecondaryIndex도 커진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PK는 명시할 것
    &lt;ul&gt;
      &lt;li&gt;AUTO_INCREMENT 컬럼을 이용해서라도 PK를 사용하는 것이 좋다. 그렇지 않으면 InnoDB가 내부적으로 추가하는데, 이러면 사용자가 이 컬럼에 접근할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;unique&quot;&gt;Unique&lt;/h3&gt;
&lt;p&gt;유니크와 아닌 경우 인덱스 구조상 차이점이 없다.&lt;/p&gt;

&lt;h4 id=&quot;인덱스-읽기&quot;&gt;인덱스 읽기&lt;/h4&gt;
&lt;p&gt;읽기는 별차이가 없다. 유니크하냐 아니냐는 몇 개를 더 읽어야 하는가의 차이일 뿐이다.&lt;/p&gt;

&lt;h4 id=&quot;쓰기&quot;&gt;쓰기&lt;/h4&gt;
&lt;p&gt;중복된 값이 있는지 없는지를 체크해야 하므로 한 단계가 더 붙는다. 중복 체크시 읽기 잠금을 하고, 쓰기할 때는 쓰기 잠금을 사용한다. 떄문에 데드락이 빈번히
발생한다. 또한 InnoDB는 인덱스 키의 저장을 버퍼링하기 위해서 ChangeBuffer가 사용된다. Unique는 중복 확인이 필요하기에 작업을 버퍼링 할 수 없다.&lt;/p&gt;

&lt;h3 id=&quot;foreignkey&quot;&gt;ForeignKey&lt;/h3&gt;

&lt;p&gt;외래키 제약이 설정되면 자동으로 생성된다. InnoDB 외래키는 아래의 특징이 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;테이블 변경이 발생하는 경우만 잠금 경합이 발생&lt;/li&gt;
  &lt;li&gt;외래키와 연관되지 않은 컬럼의 변경은 최대한 잠금 경합을 발생시키지 않는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;자식 테이블의 외래 키 컬럼의 변경은 부모 테이블 확인이 필요하다. 이 상태에서 부모 테이블의 해당 레코드에 쓰기 잠금이 걸려있으면 잠금 해제까지 기다린다.&lt;/p&gt;

  &lt;p&gt;반대로 부모가 삭제되면 자식에 대한 레코드 잠금이 해제될까지 기다린다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 25 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[programmers Series] Lv. 02 Matchandremove</title>
        <link>/programmers/2024/07/24/Programmers-series-LV.-02-MatchAndRemove.html</link>
        <guid isPermaLink="true">/programmers/2024/07/24/Programmers-series-LV.-02-MatchAndRemove.html</guid>
        <description>&lt;h1 id=&quot;짝지어-제거하기&quot;&gt;짝지어 제거하기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12973&quot;&gt;Programmers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;pre&gt;
짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다.
먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다.
그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다.
이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다.
문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요.
성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.


예를 들어, 문자열 S = baabaa 라면

b aa baa → bb aa → aa →
의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.

제한사항
 - 문자열의 길이 : 1,000,000이하의 자연수
 - 문자열은 모두 소문자로 이루어져 있습니다.
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h2&gt;
&lt;p&gt;스택 사용&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MatchAndRemove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;baabaa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cdcd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 24 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[programmers Series] Lv. 02 Makelargenumber</title>
        <link>/programmers/2024/07/20/Programmers-series-LV.-02-MakeLargeNumber.html</link>
        <guid isPermaLink="true">/programmers/2024/07/20/Programmers-series-LV.-02-MakeLargeNumber.html</guid>
        <description>&lt;h1 id=&quot;큰-수-만들기&quot;&gt;큰 수 만들기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/42883&quot;&gt;Programmers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;pre&gt;
어떤 숫자에서 k개의 수를 제거했을 때 얻을 수 있는 가장 큰 숫자를 구하려 합니다.
예를 들어, 숫자 1924에서 수 두 개를 제거하면
[19, 12, 14, 92, 94, 24] 를 만들 수 있습니다.
이 중 가장 큰 숫자는 94 입니다.

문자열 형식으로 숫자 number와 제거할 수의
개수 k가 solution 함수의 매개변수로 주어집니다.
number에서 k 개의 수를 제거했을 때 만들 수 있는 수 중
가장 큰 숫자를 문자열 형태로 return 하도록 solution 함수를 완성하세요.

 제한 조건
 - number는 2자리 이상, 1,000,000자리 이하인 숫자입니다.
 - k는 1 이상 number의 자릿수 미만인 자연수입니다.
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h2&gt;
&lt;p&gt;스택 사용&lt;/p&gt;

&lt;p&gt;쭉 순회하면서 이전의 수와 비교하는 방식으로 진행
스택에 넣고 스택보다 이번 수가 크면 스택을 pop하고 이번 수를 스택에 넣는 방식으로 진행&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakeLargeNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1924&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;94&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/**
             * 1924 -&amp;gt; 2개를 지운다.
             * 1회차-----------
             * 가장 큰 숫자를 찾는다. 9
             *      9 전의 숫자만큼 지운다. 924
             *      remove Count를 지운 만큼 줄인다. 1
             *      9 이후의 숫자를 넘긴다.
             *      9를 저장한다.
             *
             * save [9] next 24
             * 2회차-----------
             * 가장 큰 숫자를 찾는다. 4
             *
             */&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1231234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4177252841&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;775841&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 20 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[programmers Series] Lv. 02 Magicelevator</title>
        <link>/programmers/2024/07/18/Programmers-series-LV.-02-MagicElevator.html</link>
        <guid isPermaLink="true">/programmers/2024/07/18/Programmers-series-LV.-02-MagicElevator.html</guid>
        <description>&lt;h1 id=&quot;마법의-엘리베이터&quot;&gt;마법의 엘리베이터&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/148653&quot;&gt;Programmers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;pre&gt;
마법의 세계에 사는 민수는 아주 높은 탑에 살고 있습니다.
탑이 너무 높아서 걸어 다니기 힘든 민수는 마법의 엘리베이터를 만들었습니다.
마법의 엘리베이터의 버튼은 특별합니다.

마법의 엘리베이터에는 -1, +1, -10, +10, -100, +100 등과
같이 절댓값이 10c (c ≥ 0 인 정수) 형태인 정수들이 적힌 버튼이 있습니다.
마법의 엘리베이터의 버튼을 누르면 현재 층 수에 버튼에 적혀 있는 값을 더한 층으로 이동하게 됩니다.
단, 엘리베이터가 위치해 있는 층과 버튼의 값을 더한 결과가 0보다 작으면
엘리베이터는 움직이지 않습니다. 민수의 세계에서는 0층이 가장 아래층이며 엘리베이터는
현재 민수가 있는 층에 있습니다.

마법의 엘리베이터를 움직이기 위해서 버튼 한 번당 마법의 돌 한 개를 사용하게 됩니다.
예를 들어, 16층에 있는 민수가
0층으로 가려면 -1이 적힌 버튼을 6번,
-10이 적힌 버튼을 1번 눌러 마법의 돌 7개를 소모하여 0층으로 갈 수 있습니다.

하지만, +1이 적힌 버튼을 4번,
-10이 적힌 버튼 2번을 누르면 마법의 돌 6개를 소모하여 0층으로 갈 수 있습니다.

마법의 돌을 아끼기 위해 민수는 항상 최소한의 버튼을 눌러서 이동하려고 합니다.
민수가 어떤 층에서 엘리베이터를 타고 0층으로 내려가는데 필요한 마법의 돌의 최소 개수를 알고 싶습니다.
민수와 마법의 엘리베이터가 있는 층을 나타내는 정수 storey 가 주어졌을 때,
0층으로 가기 위해 필요한 마법의 돌의 최소값을 return 하도록 solution 함수를 완성하세요.

제한사항
1 ≤ storey ≤ 100,000,000
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h2&gt;
&lt;p&gt;다양한 경우의 수를 나열하고 언제 어떤 연산을 해야할지 정해야할 것 같다.
굳이 따지자면 동적계획법인가 싶기도 하다.&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagicElevator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case01&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case02&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2554&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case03&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case04&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case05&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case06&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case07&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case08&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case09&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/**
             * +5 80 5
             * +20 100 2
             * -100 0 1
             */&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;555&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1051&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beforeNext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beforeNext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beforeNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)*&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//다음 숫자 고려하고 더하는게 나은지 확인&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 18 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[programmers Series] Lv. 02 Longjump</title>
        <link>/programmers/2024/07/15/Programmers-series-LV.-02-LongJump.html</link>
        <guid isPermaLink="true">/programmers/2024/07/15/Programmers-series-LV.-02-LongJump.html</guid>
        <description>&lt;h1 id=&quot;멀리-뛰기&quot;&gt;멀리 뛰기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12914&quot;&gt;Programmers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;pre&gt;
효진이는 멀리 뛰기를 연습하고 있습니다.
효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다.
칸이 총 4개 있을 때, 효진이는

(1칸, 1칸, 1칸, 1칸)
(1칸, 2칸, 1칸)
(1칸, 1칸, 2칸)
(2칸, 1칸, 1칸)
(2칸, 2칸)

의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다.
멀리뛰기에 사용될 칸의 수 n이 주어질 때,
효진이가 끝에 도달하는 방법이 몇 가지인지 알아내,
여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요.

예를 들어 4가 입력된다면, 5를 return하면 됩니다.

  제한 사항
n은 1 이상, 2000 이하인 정수입니다.
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;모듈러&lt;/li&gt;
  &lt;li&gt;점화식 세우기&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LongJump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCases&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/**
             * (1칸, 1칸, 1칸)
             * (1칸, 2칸)
             * (2칸, 1칸)
             */&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/**
             * (1칸, 1칸, 1칸, 1칸)
             * (1칸, 2칸, 1칸)
             * (1칸, 1칸, 2칸)
             * (2칸, 1칸, 1칸)
             * (2칸, 2칸)
             */&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/**
             * (1칸, 1칸, 1칸, 1칸, 1칸)
             * (2칸, 1칸, 1칸, 1칸)
             * (1칸, 2칸, 1칸, 1칸)
             * (1칸, 1칸, 2칸, 1칸)
             * (1칸, 1칸, 1칸, 2칸)
             * (2칸, 2칸, 1칸)
             * (2칸, 1칸, 2칸)
             * (1칸, 2칸, 2칸)
             */&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/**
             * (1칸, 1칸, 1칸, 1칸, 1칸, 1칸)
             * (2칸, 1칸, 1칸, 1칸, 1칸)
             * (1칸, 2칸, 1칸, 1칸, 1칸)
             * (1칸, 1칸, 2칸, 1칸, 1칸)
             * (1칸, 1칸, 1칸, 2칸, 1칸)
             * (1칸, 1칸, 1칸, 1칸, 2칸)
             *
             * (2칸, 2칸, 1칸, 1칸)
             * (1칸, 1칸, 2칸, 2칸)
             * (2칸, 1칸, 2칸, 1칸)
             * (1칸, 2칸, 1칸, 2칸)
             * (2칸, 1칸, 1칸, 2칸)
             * (1칸, 2칸, 2칸, 1칸)
             *
             * (2칸, 2칸, 2칸)
             */&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1_234_567&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 15 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[programmers Series] Lv. 02 Leastcommonmultiple</title>
        <link>/programmers/2024/07/14/Programmers-series-LV.-02-LeastCommonMultiple.html</link>
        <guid isPermaLink="true">/programmers/2024/07/14/Programmers-series-LV.-02-LeastCommonMultiple.html</guid>
        <description>&lt;h1 id=&quot;n개의-최소공배수&quot;&gt;N개의 최소공배수&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12953&quot;&gt;Programmers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;pre&gt;
두 수의 최소공배수(Least Common Multiple)란 입력된 두 수의 배수 중
공통이 되는 가장 작은 숫자를 의미합니다.

예를 들어 2와 7의 최소공배수는 14가 됩니다.
정의를 확장해서, n개의 수의 최소공배수는 n 개의 수들의 배수 중
공통이 되는 가장 작은 숫자가 됩니다. n개의 숫자를 담은 배열 arr이 입력되었을 때
이 수들의 최소공배수를 반환하는 함수, solution을 완성해 주세요.

제한 사항
- arr은 길이 1이상, 15이하인 배열입니다.
- arr의 원소는 100 이하인 자연수입니다.
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h2&gt;

&lt;h3 id=&quot;최대-공약수greatest-common-divisor-gcd&quot;&gt;최대 공약수(Greatest Common Divisor: GCD)&lt;/h3&gt;
&lt;p&gt;공약수 중 가장 큰 것&lt;/p&gt;

&lt;h4 id=&quot;유클리드-호제법&quot;&gt;유클리드 호제법&lt;/h4&gt;
&lt;p&gt;2개의 자연수의 최대 공약수를 구하는 알고리즘의 하나다. 두 수가 서로 상대방 수를 나눠서 결국 원하는 수를 얻는 알고리즘을 나타낸다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(a &amp;gt; b일 떄) a를 b로 나눈 나머지를 r이라고 하면 a, b의 최대 공약수는 b와 r의 최대 공약수와 같다&lt;/code&gt;는 성질을 이용한 방식이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;최소-공배수least-common-multiple-lcm&quot;&gt;최소 공배수(Least Common Multiple: LCM)&lt;/h3&gt;
&lt;p&gt;두 자연수들의 배수들 중에서 공통된 가장 작은 수&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lcm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LeastCommonMultiple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;168&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lcm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lcm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lcm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 14 Jul 2024 00:00:00 +0900</pubDate>
      </item>
    
  </channel>
</rss>
