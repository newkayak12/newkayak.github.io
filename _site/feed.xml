<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>newkayak12.github.io</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <link>https://github.com/newkayak12/newkayak12.github.io/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Wed, 19 Jun 2024 22:43:53 +0900</pubDate>
    
      <item>
        <title>[programmers Series] Lv. 01 Gif</title>
        <link>/programmers/2024/06/19/Programmers-series-LV.-01-Gif.html</link>
        <guid isPermaLink="true">/programmers/2024/06/19/Programmers-series-LV.-01-Gif.html</guid>
        <description>&lt;h1 id=&quot;카카오---가장-많이-받은-선물&quot;&gt;카카오 - 가장 많이 받은 선물&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/258712&quot;&gt;Programmers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;pre&gt;
당신의 친구들이 이번 달까지 선물을 주고받은 기록을 바탕으로 다음 달에 누가 선물을 많이 받을지 예측하려고 합니다.

두 사람이 선물을 주고받은 기록이 있다면,
이번 달까지 두 사람 사이에 더 많은 선물을 준 사람이 다음 달에 선물을 하나 받습니다.


예를 들어

A가 B에게 선물을 5번 줬고,
B가 A에게 선물을 3번 줬다면

다음 달엔 A가 B에게 선물을 하나 받습니다.


두 사람이 선물을 주고받은 기록이 하나도 없거나
주고받은 수가 같다면,
선물 지수가 더 큰 사람이 선물 지수가 더 작은 사람에게 선물을 하나 받습니다.

선물 지수는 이번 달까지 자신이 친구들에게 준 선물의 수에서 받은 선물의 수를 뺀 값입니다.


예를 들어 A가 친구들에게 준 선물이 3개고 받은 선물이 10개라면 A의 선물 지수는 -7입니다.
B가 친구들에게 준 선물이 3개고 받은 선물이 2개라면 B의 선물 지수는 1입니다.

만약 A와 B가 선물을 주고받은 적이 없거나 정확히 같은 수로 선물을 주고받았다면,
다음 달엔 B가 A에게 선물을 하나 받습니다.

만약 두 사람의 선물 지수도 같다면 다음 달에 선물을 주고받지 않습니다.

위에서 설명한 규칙대로 다음 달에 선물을 주고받을 때, 당신은 선물을 가장 많이 받을 친구가 받을 선물의 수를 알고 싶습니다.
&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h2&gt;
&lt;p&gt;Map 사용&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Nested&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;muzi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ryan&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;frodo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;neo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;muzi frodo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;muzi frodo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ryan muzi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ryan muzi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ryan muzi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;frodo muzi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;frodo ryan&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;neo muzi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;joy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;brad&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alessandro&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;conan&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;david&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alessandro brad&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alessandro joy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alessandro conan&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;david alessandro&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alessandro david&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;case3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 더 많이 준 사람이 다음 달에 선물을 하나 받는다.&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; A = 5 =&amp;gt; B, B = 3 =&amp;gt; A  ==&amp;gt; B = 1 =&amp;gt; A&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 기록이 없거나 주고 받은 수가 같으면 선물 지수가 더 큰사람이 작은 사람에게 하나 받는다.&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 선물 지수는 이번 달까지 자신이 선물에게 준 수에서 받은 수를 뺀 값이다.&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIfPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;map2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;map2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;map2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIfPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;map2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computeIfPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;



        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iToj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jToi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iToj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jToi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iToj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jToi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrDefault&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iIdx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jIdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;



        &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friendMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friendMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 19 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[others Series]analytics</title>
        <link>/2024/06/19/Others-series-Analytics.html</link>
        <guid isPermaLink="true">/2024/06/19/Others-series-Analytics.html</guid>
        <description>&lt;h1 id=&quot;mau-dau-mcu-acu&quot;&gt;MAU, DAU, MCU, ACU&lt;/h1&gt;

&lt;h2 id=&quot;mau-monthly-activity-user-&quot;&gt;MAU( Monthly Activity User )&lt;/h2&gt;
&lt;p&gt;월별 활동한 이용자를 의미하며, 한 달에 몇 명이나 이 서비스를 이용하는지에 대해서 구분할 때 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;dau-daily-activity-user-&quot;&gt;DAU( Daily Activity User )&lt;/h2&gt;
&lt;p&gt;일별 활동 이용자에 대한 수치. 하루에 몇 명이나 이 서비스를 이용하는지에 대해서 이야기한다.&lt;/p&gt;

&lt;h2 id=&quot;mcu-maximum-current-user-&quot;&gt;MCU( Maximum Current User )&lt;/h2&gt;
&lt;p&gt;순간 동시 접속자를 의미하며, 보통 실시간으로 수치를 해석한다.&lt;/p&gt;

&lt;h2 id=&quot;acu-average-current-user-&quot;&gt;ACU( Average Current User )&lt;/h2&gt;
&lt;p&gt;평균 동시 접속자를 의미한다.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[effective Java Series] 72.overridereadobjectdefensively</title>
        <link>/2024/06/17/Effective-java-series-72.OverrideReadObjectDefensively.html</link>
        <guid isPermaLink="true">/2024/06/17/Effective-java-series-72.OverrideReadObjectDefensively.html</guid>
        <description>&lt;h1 id=&quot;readobject-메소드는-방어적으로&quot;&gt;ReadObject 메소드는 방어적으로&lt;/h1&gt;

&lt;p&gt;readObject는 실질적으로 public 생성자이다. deserialize 하면 객체가 생성되기 때문이다. 그래서 보통의 생성자처럼 readObject 메소드에도 인수가 유효한지
검사하고 필요하다면 매개변수를 방어적으로 복사해야 한다. readObject를 이 작업을 제대로 수행하지 못하면 클래스 불변식이 깨는 공격을 쉬이 당할 수 있기 때문이다.
즉, 불변식이 깨뜨릴 의도로 임의 생성한 바이트 스트림을 건네면 문제가 생긴다.&lt;/p&gt;

&lt;p&gt;결론적으로 객체를 역직렬화할 때는 클라이언트가 소유해서는 안되는 객체 참조를 갖는 필드를 모두 반드시 방어적으로 복사해야 한다.&lt;/p&gt;

&lt;h1 id=&quot;인스턴스-수를-통제해야-한다면-readresolve보다는-열거-타입을-사용하자&quot;&gt;인스턴스 수를 통제해야 한다면 readResolve보다는 열거 타입을 사용하자.&lt;/h1&gt;

&lt;p&gt;readResolve를 사용하면  readObject가 만들어진 인스턴스를 다른 것으로 대체할 수 있다. 역직렬화한 객체의 클래스가 readResolve 메소드를 적절히 정의해뒀다면
역직렬화 후 새로 생성된 객체를 인수로 이 메소드가 호출되고, 이 메소드가 반환한 객체 참조가 새로 생성된 객체를 대신해 반환된다.&lt;/p&gt;

&lt;p&gt;이 메소드는 역직렬화한 객체는 무시하고 클래스 초기화 때 만들어진 인스턴스를 반환한다. 추가로 인스턴스 통제 목적으로 사용하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transient&lt;/code&gt;로 해당 인스턴스를 제외해야
객체 참조 공격을 방어할 수 있다. 만약 그렇지 않으면 메소드가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readResolve&lt;/code&gt; 메소드가 실행되기 전에 역직렬화된다. 그러면 참조 필드가 역직렬화되는 시점에
그 역직렬화된 인스턴스의 참조를 훔쳐올 수 있다. 인스턴스 통제에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readResolve&lt;/code&gt;가 효과가 없는건 아니다. 컴파일 타임에 어떤 인스턴스들이 알 수 없다면 (리플렉션같은)
직렬화 가능 인스턴스 통제 클래스를 작성해서 이를 수행할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;직렬화된-인스턴스-대신-직렬화-프록시-사용을-검토하자&quot;&gt;직렬화된 인스턴스 대신 직렬화 프록시 사용을 검토하자&lt;/h1&gt;

&lt;p&gt;serializable을 구현하면 비정상적인 방법으로 인스턴스를 생성할 수 있게 돈다. 버그와 보안 문제가 일어날 가능성이 커진다는 뜻이다. 이 위험을 크게 줄일 기법이 있다.
직렬화 프록시 패턴(serialization proxy pattern)이다.&lt;/p&gt;

&lt;p&gt;바깥 클래스와 논리적 상태를 정밀하게 표현하는 중첩 클래스를 설계해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private static&lt;/code&gt;이 중첩 클래스가 바로 바깥 클래스의 직렬화 프록시다. 중첩 클래스의
생성자는 단 하나여야 하며, 바깥 클래스를 배개변수로 받아야 한다. 이 생성자는 단순히 인수로 넘어온 인스턴스의 데이터를 복사한다. 일관성 검사나 방어적 복사가
필요 없다. 설계상, 직렬화 프록시의 기본 직렬화 형태는 바깥 클래스의 직렬화 형태로 쓰기에 이상적이다. 그리고 바깥 클래스와 직렬화 프록시 모두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serializable&lt;/code&gt;을 구현한다고 선언해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.Serializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.Period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SerializationProxy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;SerializationProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Period&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeReplace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Serializationproxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;writeReplace 덕에 직렬화 시스템은 바깥 클래스의 직렬화된 인스턴스를 생성해낼 수 없다.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[effective Java Series] 71.serializable</title>
        <link>/2024/06/17/Effective-java-series-71.Serializable.html</link>
        <guid isPermaLink="true">/2024/06/17/Effective-java-series-71.Serializable.html</guid>
        <description>&lt;h1 id=&quot;직렬화&quot;&gt;직렬화&lt;/h1&gt;

&lt;p&gt;직렬화는 프로그래머가 어렵지 않게 분산 객체를 만들 수 있다는 매력이 있지만, 보이지 않는 생성자, API와 구현 사이 모호해진 경계, 잠재적 정확성 문제, 성능, 보안,
유지보수성 등 대가가 크다는 단점이 있다.&lt;/p&gt;

&lt;p&gt;더 근본적으로는 공격당한 포인트가 너무 많다는 것이 있다. Object의 readObject(implement Serializable)는 classPath 안 거의 모든 타입의 객체를 만들어 
낼 수 있는 마스터키와 같다. 바이트 스트림을 역직렬화하는 과정에서 이 메소드는 타입들 안의 모든 코드를 수행할 수 있게 된다. 실제로 신뢰할 수 없는 스트림을 역직렬화하면
원격 코드 실행(RCE), 서비스 거부(denial-of-service, DoS) 등의 공격을 유발할 수 있다.&lt;/p&gt;

&lt;p&gt;직렬화 과정에서 호출되어 잠재적으로 위험한 동작을 수행하는 메소드들을 gadget이라고 부른다. gadget끼리 체이닝을 구서알 수도 있다. 이런 체이닝으로 하드웨어
네이티브 코드를 마음대로 실행할 수 있는 강력한 취약점이 발견되고는 한다.(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCE&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;혹은 역직렬화에 시간이 오래 걸리게 해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deserialization bomb&lt;/code&gt;을 투하할 수도 있다. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DoS&lt;/code&gt;) 이는 역직렬화 과정에서 그래프 탐색을 해서 계속 역직렬화 하는 것에서
착안된 공격이다. 이를 피하기 위해서 그래프 탐색을 멈추는 방법이 있다.&lt;/p&gt;

&lt;p&gt;이런 단점이 있는데 굳이 (역)직렬화를 할 필요는 없다.  JSON/ protocolBuffer가 대안으로 있다. 둘의 차이는 사람이 그냥 눈으로 읽고 이해할 수 있는가 정도다.
JSON은 사람이 읽을 수 있다. protocolBuffer는 바이너리 표현이라 어렵다. 물론 사람이 읽을 수 있도록 개선한 protocolBuffer도 있다(pbtxt)&lt;/p&gt;

&lt;p&gt;뭐 이래도 굳이 (역)직렬화를 해야한다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.io.ObjectInputFilter&lt;/code&gt;로 스트림이 역직렬화되기 전에 필터링할 수 있다. 화이트리스트 정책을 잡아서 필터링하고
그 결과를 (역)직렬화하면 비교저거 안전하다.&lt;/p&gt;

&lt;h1 id=&quot;serializable을-구현할지는-고민해봐라&quot;&gt;Serializable을 구현할지는 고민해봐라&lt;/h1&gt;

&lt;p&gt;늘 그렇듯 인터페이스 구현 문제다. serializable을 구현하면 serialVersionUID가 생기는데 내부 구현을 바꾸면 이 값이 달라져 원래 직렬화 형태와 달라지게 된다.
(그래서 직접 고른 값으로 명시적으로 작성하여 해당 문제를 피하기도 한다.)
이러면 더 이상 확장을 불가능하게 한다. 물론 그대로 두고 내부 구현을 바꿀 수도 있지만 소스코드에 불필요한 혹을 남겨놓게 된다.&lt;/p&gt;

&lt;p&gt;또한 Serializable은 언어의 기본 생성 메커니즘을 뒤흔든다. 생성자 없이 객체 생성을 할 수 있게 하기 때문이다. 이 과정에서 일부러 생성을 실패하게 하고
finalize를 실행시키는 공격도 가능하다.&lt;/p&gt;

&lt;h1 id=&quot;굳이-쓴다면-커스터마이즈하자&quot;&gt;굳이 쓴다면 커스터마이즈하자&lt;/h1&gt;

&lt;p&gt;고민해보고 기본 직렬화를 사용해도 될거 같으면 사용해도 된다. 직렬화하면 객체를 루트로하는 객체의 데이터와 그 객체에서부터 접근할 수 있는 모든 객체를 담아내며,
객체들이 연결된 토폴로지까지 기술한다. 이렇게 꽤나 자세한 정보들이 기술되어 있기 때문에 불변식 보장과 보안을 위해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readObject&lt;/code&gt;를 커스터마이징해서 제공해야
할 때가 많다. 또한, 객체의 물리적 표현과 논리적 표현 차이가 클 때 기본 직렬화 형태를 사용하는 것이 문제가 생기는 경우가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;공개 API가 내부 구현방식에 종속된다.&lt;/li&gt;
  &lt;li&gt;너무 많은 공간을 차지할 수도 있다.&lt;/li&gt;
  &lt;li&gt;시간이 오래걸릴 수도 있다.&lt;/li&gt;
  &lt;li&gt;스택오버플로의 위험에 노출된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;또한 기본 직렬화를 사용하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transient&lt;/code&gt; 값이 직렬화/ 역직렬화 대상에서 제외되므로 문제가 될 수도 있다.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[effective Java Series] 70.donotdependonscheduler</title>
        <link>/2024/06/17/Effective-java-series-70.DoNotDependOnScheduler.html</link>
        <guid isPermaLink="true">/2024/06/17/Effective-java-series-70.DoNotDependOnScheduler.html</guid>
        <description>&lt;h1 id=&quot;스케쥴러에-의존하지-말라&quot;&gt;스케쥴러에 의존하지 말라&lt;/h1&gt;

&lt;p&gt;보통 OS 스케쥴러에 의존해서 쓰레드를 얼마나 오래 실핼할지 정한다. 그러나 OS 별로 스케쥴링 정책은 달라진다.
따라서 이에 의존하면 정확성, 성능이 스케쥴러에 따라 달라지는 일이 발생한다. 플랫폼에 의존적이게 된다는 의미다.&lt;/p&gt;

&lt;p&gt;보통 OS의 평균 쓰레드 수보다 적게 쓰레드 수를 잡으면 스케쥴링에 지장이 생기기 않게 된다. 실행 준비가 됐다면 쓰레드들이 맡은 작업을 끝낼 때까지
굳이 반환할 필요가 없다.&lt;/p&gt;

&lt;p&gt;실행 가능한 쓰레드 수를 적게 유지하는 방법(가용성을 높히는 방법)은 각 쓰레드가 쉬면 대기하고 있는 다른 일을 시키면 된다. 그러면 쉬는 시간이 줄고 가용성이 높아진다.
혹여, CPU 스케쥴링 타임을 제대로 할당받지 못해서 간신히 돌아가는 경우를 보더라도  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.yield&lt;/code&gt;로 쓰레드 권한 이양하는 일은 염두하지 말자.
쓰레드마다 다를 수 있으므로 범용적인 방법은 아닐 수 있다.&lt;/p&gt;

</description>
        <pubDate>Mon, 17 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[effective Java Series] 69.executorandtaskandstream</title>
        <link>/2024/06/17/Effective-java-series-69.ExecutorAndTaskAndStream.html</link>
        <guid isPermaLink="true">/2024/06/17/Effective-java-series-69.ExecutorAndTaskAndStream.html</guid>
        <description>&lt;h1 id=&quot;쓰레드보다-실행자-태스크-스트림&quot;&gt;쓰레드보다 실행자, 태스크, 스트림&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExecutorService exec = Executors.newSingleThreadExecutor();&lt;/code&gt; 로 실행자를 만들 수 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.concurrent&lt;/code&gt;에 있다.
이러고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec.execute(runnable);&lt;/code&gt;로 task를 넘길 수 있다.&lt;/p&gt;

&lt;p&gt;이외도&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;특정 태스크가 완료되길 기다린다.&lt;/li&gt;
  &lt;li&gt;태스크 셋 중 뭐든 (invokeAny) 혹은 모두(invokeAll) 완료되길 기다린다.&lt;/li&gt;
  &lt;li&gt;실행자 서비스가 종료되길 기다릴 수 있다.&lt;/li&gt;
  &lt;li&gt;완료된 태스크들 결과를 차례로 받는다.&lt;/li&gt;
  &lt;li&gt;태스크를 특정 시간에 혹은 주기적으로 실행하게 한다.(ScheduledThreadPoolExecutor)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;자바 7이 되면서 fork-join이 태스크를 지원하도록 확장됐다. ForkJoinPool을 구성하는 쓰레드들이 이 태스크 들을 처리하며, 일을 먼저 끝낸 쓰레드는 다른 쓰레드의
남은 태스크를 가져와서 대신 처리할 수도 있다.&lt;/p&gt;

&lt;h1 id=&quot;wait-notify-보단-동시성-유틸리티&quot;&gt;wait, notify 보단 동시성 유틸리티&lt;/h1&gt;

&lt;p&gt;wait, notify는 까다롭다. 차라리 고수준 동시성 유틸리티를 사용하자.&lt;/p&gt;

&lt;p&gt;executorFramework, concurrent collection, synchronizer다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;concurrent collection&lt;/code&gt;는 내부에서 동기화를 실행한다. 동시성 컬렉션에서동시성을 무력화시키는 건 
불가능하며, 외부에서 락을 추가로 사용하면 오히려 속도가 느려진다. 근데, 메소드를 원자적으로 묶어서 호출하는 건 불가하다.(묶어서 하나의 덩어리로) 그래서 기본
동작을 하나의 원자 단위로 묶는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;상태 의존성 수정&lt;/code&gt; 메소드들이 추가됐다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;putIfAbsent&lt;/code&gt;가 예시다. 컬렉션 인터페이스 중 일부는 작업 성공이 확인될 때까지 기다리도록
확장된 경우도 있다. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockingQueue&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;내부 동기화 장치로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CountDownLatch&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Semaphore&lt;/code&gt; 등이 있다. countDownLatch는 일회성 장벽으로, 하나 이상의 쓰레드가 또 다른 쓰레드 작업이 끝날 때까지 
기다리게 한다. 주의할 점은 코어 이상으로 래치를 설정하면 쓰레드 기아 교착에 빠질 수 있다.(Thread starvation deadlock)&lt;/p&gt;

&lt;p&gt;굳이 이 둘을 사용해야 한다면 wait은 synchronized 안에서 사용하고 while 내부에서 사용해서 기다리게 해야 한다. 조건이 충족되면 풀어주고 notify해야 한다.
여기서 notifyAll, notify 중 고민하게 될텐데, 일반적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notifyAll&lt;/code&gt;이 나을 수 있다.  모든 쓰레드가 깨어나지만 외부 공격에 의해서 깨운 Thread를 다시 sleep되어 
영원이 sleep하는 경우에서 벗어날 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;문서화&quot;&gt;문서화&lt;/h1&gt;

&lt;p&gt;멀티 쓰레드 환경에서도 API를 안전하게 사용하게 하려면 클래스가 지원하는 쓰레드 안정성 수준을 명시해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;불변(immutable) : 클래스 인스턴스는 마치 상수와 같아서 외부 동기화 필요가 없다.&lt;/li&gt;
  &lt;li&gt;무조건 쓰레드 안전(unconditionally thread-safe) : 인스턴스는 수정될 수 있으나, 내부에서 충실히 동기화 해서 별도 외부 동기화가 필요 없다.&lt;/li&gt;
  &lt;li&gt;조건부 쓰레드 안전(conditionally thread-safe) : 무조건적 쓰레드 안전과 같으나 일부 메소드에는 동시에 사용하려면 외부 동기화가 필요&lt;/li&gt;
  &lt;li&gt;쓰레드 안전하지 않음(not thread-safe) : 이 클래스의 인스턴스는 수정될 수 있다. 동시에 사용하려면 각각의 메소드 호출을 클라이언트가 외부에서 동기화 해야 한다.&lt;/li&gt;
  &lt;li&gt;쓰레드 적대적(thread-hostile) : 외부 동기화를 해도 멀티쓰레드 환경에서 위험한 경우다. 예를 들어 정적 데이터를 동기화 없이 수정하는 경우다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 기준에 맞춰서 문서화하여 적절한 처리를 할 수 있도록 유도해야 한다. 물론 메소드 시그니쳐에 명시할 수도 있다.&lt;/p&gt;

&lt;h1 id=&quot;지연-초기화는-신중히&quot;&gt;지연 초기화는 신중히&lt;/h1&gt;

&lt;p&gt;lazy initialization은 초기화 시점이 해당 값이 필요할 때까지 늦추는 방법이다. 주로 최적화에 사용하지만 클래스, 인스턴스 초기화 때 발생하는 위험한 순환
문제를 해결하는 효과도 있다. 물론 접근시 비용이 늘어난다.&lt;/p&gt;

&lt;p&gt;멀티 쓰레드 환경에서는 지연초기화는 문제가 될 수 있다. 필드를 둘 이상의 쓰레드가 공유하면 동시에 여러 개를 초기화할 수 있다. 지연 초기화가 초기화 순환성(initialization circularity)
를 깨뜨릴거 같으면 synchronized를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;혹은 lazy initialization holder class를 사용할 수도 있다. 클래스는 클래스가 처음 쓰일 때 비로소 초기화 된다는 특성을 이용한 관용구다( 싱글톤에서도 유용하다. )
혹은 이중 검사(double-check) 관용구를 사용할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volatie&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldExample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldExample&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;FieldExample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//할당&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 17 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[effective Java Series] 68.syncsharedresources</title>
        <link>/2024/06/17/Effective-java-series-68.SyncSharedResources.html</link>
        <guid isPermaLink="true">/2024/06/17/Effective-java-series-68.SyncSharedResources.html</guid>
        <description>&lt;h1 id=&quot;공유-중인-가변-데이터는-동기화하자&quot;&gt;공유 중인 가변 데이터는 동기화하자&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt;는 해당 메소드, 블록을 한 번에 한 쓰레드씩 수행하도록 보장한다. 즉, 객체를 하나의 일관된 상태에서 다른 일관된 상태로 변경시킨다. 동기화를
제대로 사용하면 어떤 메소드도 이 객체의 상태가 일관되지 않은 순간을 볼 수 없다.&lt;/p&gt;

&lt;p&gt;동기화 이외에 다른 쓰레드가 만든 변화를 체크하기 위한 용도로도 사용할 수 있다. 동기화는 일관성이 꺠진 상태를 볼 수 없게 하는 것은 물론, 동기화된 메소드나 블록에 들어간
쓰레드가 같은 락의 보호 하에 수행된 모든 이전 수정의 최종 결과를 보게 해준다.&lt;/p&gt;

&lt;p&gt;자바 명세는 쓰레드가 필드를 읽을 때 ‘수정이 완전히 반영된’ 값을 보장한다고 하지만, 쓰레드 간에도 보장하는가 하면 아니다. 따라서 동기화는 배타적 실행뿐만 아니라
쓰레드 사이의 안정적인 통신에 꼭 필요하다. 이는 쓰레드가 만든 변화가 다른 쓰레드에 언제 어떻게 보이는지를 규정한 자바의 메모리 모델 때문이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopRequested&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 코드가 있다고 하자 쓰레드 동기화를 사용하지 않으면, jvm이 코드 최적화를 할 때&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopRequested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로 바뀐다. 이는 hoisting 때문이다. 이런 잘못된 최적화로 synchronized를 사용하지 않으면  원하는대로 코드가 작동하지 않을 수 있다. 
혹은 위  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stopRequested&lt;/code&gt; 변수를 get, set으로 바꾸고 둘 다 synchronized를 붙이는 방법도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopRequested&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestedStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stopRequested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopRequested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;읽기 쓰기 모두 동기화해야 한다. 변경도, 읽기도 모두 동기화 해야 상태를 보장할 수 있다. 
혹은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt;을 사용하는 방법도 있다. volatile은 해당 변수를 메인 메모리에 저장하도록 하는 예약어다.
물론 붙인다고 능사가 아니다. set 연산을 동기화해야 한다. 왜냐하면 쓰레드가 수정하고 반영하기 전 다른 쓰레드가 비집고 들어와 첫 번쨰와 같은 값을 반환할 수 있기 떄문이다.
이런 경우를 안전 실패(Safety failure)라고 한다.&lt;/p&gt;

&lt;p&gt;다른 방법으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.concurrent.atomic&lt;/code&gt;을 사용해서 원자성을 지킬 수 있다. 이 패키지에는 락 없이도 thread-safe한 클래스들이 담겨 있다.&lt;/p&gt;

&lt;h1 id=&quot;과도한-동기는-피하는게-좋다&quot;&gt;과도한 동기는 피하는게 좋다.&lt;/h1&gt;

&lt;p&gt;과도한 동기화는 당연히 성능 저하를 일으키고 심지어 교착상태에 빠뜨리기도 하고 결국 예측할 수 없는 동작을 낳기도 한다. 응답 불가, 안전 실패를 막으려면
동기화 메소드나 동기화 블록 안에서는 제어를 절대로 클라이언트에 넘기면 안된다. 즉 재정의 메소드를 넘겨도 안되고, 함수 객체도 실행하면 안된다. 이런 alien 메소드는
예외를 일으키거나, 교착상태에 빠지게 하거나 데이터를 훼손할 수도 있다.&lt;/p&gt;

&lt;p&gt;차라리 동기화 영역 바깥에서 alien 메소드를 호출(open call)하는게 좋다. 외부 메소드가 얼마나 오래 실행할지 모르기에 이는 현명한 선택이다. 즉, 실패 방지, 동시성 효율 제고를
해준다. 물론 동기화를 최소한으로 하는게 최고다. 동기화는 락을 거는게 문제가 아니라 Thread 간 경쟁으로 낭비(병렬성을 잃고 모든 코어가 메모리 일관성을 위한 지연 시간) 때문에
문제가 된다. 또한 JVM 최적화를 제한하기도 한다는 점이 큰 문제다. 그래서 차라리&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;동기화를 외부에서 하게 하거나&lt;/li&gt;
  &lt;li&gt;동기화를 아예 숨겨서 내부에서 하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;라는 방법이 있다. 2번은 차선책이다.  더 심화하면 lock-splitting, lock striping, nonblocking concurrency control 등 다양한 기법을 동원해서 
동시성을 높여줄 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;lock-splitting : 하나의 클래스에서 기능적으로 락을 분할( 읽기/ 쓰기락 )&lt;/li&gt;
  &lt;li&gt;lock striping : 자료 구조 관점에서 일부에만 락을 거는 것&lt;/li&gt;
  &lt;li&gt;nonblocking concurrency control :&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 17 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Effective java</title>
        <link>/effective_java/2024/06/16/Effective-java-series-67.AtomicExceptionAndDoNotIgnore.html</link>
        <guid isPermaLink="true">/effective_java/2024/06/16/Effective-java-series-67.AtomicExceptionAndDoNotIgnore.html</guid>
        <description>&lt;h1 id=&quot;가능한-한-실패-원자적으로-만들자--예외를-무시하지-말라&quot;&gt;가능한 한 실패 원자적으로 만들자. &amp;amp; 예외를 무시하지 말라&lt;/h1&gt;

&lt;h2 id=&quot;가능한-한-실패-원자적으로-만들자&quot;&gt;가능한 한 실패 원자적으로 만들자.&lt;/h2&gt;

&lt;p&gt;일반적으로 트랜잭션 같이 호출된 메소드가 실패하더라도 해당 객체는 메소드 호출 전 상태를 유지해야 한다. 이를 실패 원자적(failure-atomic)이라고 한다.
불변 객체는 태생적으로 변경되지 않으니 실패 원자적이다.&lt;/p&gt;

&lt;p&gt;가변 객체는 실패 원자성을 보존해줘야 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;일반적으로 객체 내부 상태 변경 전 잠재적 예외 가능성을 유효성 검사로 걸러낸다.&lt;/li&gt;
  &lt;li&gt;실패할 가능성이 있는 모든 코드를, 객체의 상태를 바꾸는 코드보다 앞에 배치하는 방법이 있다.&lt;/li&gt;
  &lt;li&gt;객체의 임시 복사본을 두고 작업을 수행하고 성공이 되면 원래 객체와 교체하는 방법이 있다.&lt;/li&gt;
  &lt;li&gt;작업 도중 발생하는 실패를 가로채는 복구 코드를 작성해여 작업 전으로 되돌리는 방법도 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;물론 실패 원자성을 보장하면 좋지만 항상 그럴 수는 없다. 예를 들어 비용이 너무 높을 때가 그 예다.&lt;/p&gt;

&lt;h2 id=&quot;예외를-무시하지-말라&quot;&gt;예외를 무시하지 말라&lt;/h2&gt;

&lt;p&gt;예외를 뱉는 경우 항상 이유가 있다. 그냥 뱉는 건 없다.  물론 catch를 비워 안쓰는 경우도 있다. 예를 들어 FileInpuStream을 닫을 때 그렇다. 
파일 상태 변경이 없으니 복구할 일이 없으며, 이후 작업을 중단할 필요도 없다.  이런 경우 변수 명으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unused&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ignored&lt;/code&gt;등으로 명시적으로 표현해야 가독성이 높아진다&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Effective java</title>
        <link>/effective_java/2024/06/16/Effective-java-series-66.DoNotDependOnScheduler.html</link>
        <guid isPermaLink="true">/effective_java/2024/06/16/Effective-java-series-66.DoNotDependOnScheduler.html</guid>
        <description>&lt;h1 id=&quot;스케쥴러에-의존하지-말라&quot;&gt;스케쥴러에 의존하지 말라&lt;/h1&gt;

&lt;p&gt;보통 OS 스케쥴러에 의존해서 쓰레드를 얼마나 오래 실핼할지 정한다. 그러나 OS 별로 스케쥴링 정책은 달라진다.
따라서 이에 의존하면 정확성, 성능이 스케쥴러에 따라 달라지는 일이 발생한다. 플랫폼에 의존적이게 된다는 의미다.&lt;/p&gt;

&lt;p&gt;보통 OS의 평균 쓰레드 수보다 적게 쓰레드 수를 잡으면 스케쥴링에 지장이 생기기 않게 된다. 실행 준비가 됐다면 쓰레드들이 맡은 작업을 끝낼 때까지
굳이 반환할 필요가 없다.&lt;/p&gt;

&lt;p&gt;실행 가능한 쓰레드 수를 적게 유지하는 방법(가용성을 높히는 방법)은 각 쓰레드가 쉬면 대기하고 있는 다른 일을 시키면 된다. 그러면 쉬는 시간이 줄고 가용성이 높아진다.
혹여, CPU 스케쥴링 타임을 제대로 할당받지 못해서 간신히 돌아가는 경우를 보더라도  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread.yield&lt;/code&gt;로 쓰레드 권한 이양하는 일은 염두하지 말자.
쓰레드마다 다를 수 있으므로 범용적인 방법은 아닐 수 있다.&lt;/p&gt;

</description>
        <pubDate>Sun, 16 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Effective java</title>
        <link>/effective_java/2024/06/16/Effective-java-series-65.ExecutorAndTaskAndStream.html</link>
        <guid isPermaLink="true">/effective_java/2024/06/16/Effective-java-series-65.ExecutorAndTaskAndStream.html</guid>
        <description>&lt;h1 id=&quot;쓰레드보다-실행자-태스크-스트림--wait-notify-보단-동시성-유틸리티--문서화--지연-초기화는-신중히&quot;&gt;쓰레드보다 실행자, 태스크, 스트림 &amp;amp; wait, notify 보단 동시성 유틸리티 &amp;amp; 문서화 &amp;amp; 지연 초기화는 신중히&lt;/h1&gt;

&lt;h2 id=&quot;쓰레드보다-실행자-태스크-스트림&quot;&gt;쓰레드보다 실행자, 태스크, 스트림&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExecutorService exec = Executors.newSingleThreadExecutor();&lt;/code&gt; 로 실행자를 만들 수 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.concurrent&lt;/code&gt;에 있다.
이러고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec.execute(runnable);&lt;/code&gt;로 task를 넘길 수 있다.&lt;/p&gt;

&lt;p&gt;이외도&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;특정 태스크가 완료되길 기다린다.&lt;/li&gt;
  &lt;li&gt;태스크 셋 중 뭐든 (invokeAny) 혹은 모두(invokeAll) 완료되길 기다린다.&lt;/li&gt;
  &lt;li&gt;실행자 서비스가 종료되길 기다릴 수 있다.&lt;/li&gt;
  &lt;li&gt;완료된 태스크들 결과를 차례로 받는다.&lt;/li&gt;
  &lt;li&gt;태스크를 특정 시간에 혹은 주기적으로 실행하게 한다.(ScheduledThreadPoolExecutor)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;자바 7이 되면서 fork-join이 태스크를 지원하도록 확장됐다. ForkJoinPool을 구성하는 쓰레드들이 이 태스크 들을 처리하며, 일을 먼저 끝낸 쓰레드는 다른 쓰레드의
남은 태스크를 가져와서 대신 처리할 수도 있다.&lt;/p&gt;

&lt;h2 id=&quot;wait-notify-보단-동시성-유틸리티&quot;&gt;wait, notify 보단 동시성 유틸리티&lt;/h2&gt;

&lt;p&gt;wait, notify는 까다롭다. 차라리 고수준 동시성 유틸리티를 사용하자.&lt;/p&gt;

&lt;p&gt;executorFramework, concurrent collection, synchronizer다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;concurrent collection&lt;/code&gt;는 내부에서 동기화를 실행한다. 동시성 컬렉션에서동시성을 무력화시키는 건 
불가능하며, 외부에서 락을 추가로 사용하면 오히려 속도가 느려진다. 근데, 메소드를 원자적으로 묶어서 호출하는 건 불가하다.(묶어서 하나의 덩어리로) 그래서 기본
동작을 하나의 원자 단위로 묶는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;상태 의존성 수정&lt;/code&gt; 메소드들이 추가됐다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;putIfAbsent&lt;/code&gt;가 예시다. 컬렉션 인터페이스 중 일부는 작업 성공이 확인될 때까지 기다리도록
확장된 경우도 있다. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockingQueue&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;내부 동기화 장치로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CountDownLatch&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Semaphore&lt;/code&gt; 등이 있다. countDownLatch는 일회성 장벽으로, 하나 이상의 쓰레드가 또 다른 쓰레드 작업이 끝날 때까지 
기다리게 한다. 주의할 점은 코어 이상으로 래치를 설정하면 쓰레드 기아 교착에 빠질 수 있다.(Thread starvation deadlock)&lt;/p&gt;

&lt;p&gt;굳이 이 둘을 사용해야 한다면 wait은 synchronized 안에서 사용하고 while 내부에서 사용해서 기다리게 해야 한다. 조건이 충족되면 풀어주고 notify해야 한다.
여기서 notifyAll, notify 중 고민하게 될텐데, 일반적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notifyAll&lt;/code&gt;이 나을 수 있다.  모든 쓰레드가 깨어나지만 외부 공격에 의해서 깨운 Thread를 다시 sleep되어 
영원이 sleep하는 경우에서 벗어날 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;문서화&quot;&gt;문서화&lt;/h2&gt;

&lt;p&gt;멀티 쓰레드 환경에서도 API를 안전하게 사용하게 하려면 클래스가 지원하는 쓰레드 안정성 수준을 명시해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;불변(immutable) : 클래스 인스턴스는 마치 상수와 같아서 외부 동기화 필요가 없다.&lt;/li&gt;
  &lt;li&gt;무조건 쓰레드 안전(unconditionally thread-safe) : 인스턴스는 수정될 수 있으나, 내부에서 충실히 동기화 해서 별도 외부 동기화가 필요 없다.&lt;/li&gt;
  &lt;li&gt;조건부 쓰레드 안전(conditionally thread-safe) : 무조건적 쓰레드 안전과 같으나 일부 메소드에는 동시에 사용하려면 외부 동기화가 필요&lt;/li&gt;
  &lt;li&gt;쓰레드 안전하지 않음(not thread-safe) : 이 클래스의 인스턴스는 수정될 수 있다. 동시에 사용하려면 각각의 메소드 호출을 클라이언트가 외부에서 동기화 해야 한다.&lt;/li&gt;
  &lt;li&gt;쓰레드 적대적(thread-hostile) : 외부 동기화를 해도 멀티쓰레드 환경에서 위험한 경우다. 예를 들어 정적 데이터를 동기화 없이 수정하는 경우다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 기준에 맞춰서 문서화하여 적절한 처리를 할 수 있도록 유도해야 한다. 물론 메소드 시그니쳐에 명시할 수도 있다.&lt;/p&gt;

&lt;h2 id=&quot;지연-초기화는-신중히&quot;&gt;지연 초기화는 신중히&lt;/h2&gt;

&lt;p&gt;lazy initialization은 초기화 시점이 해당 값이 필요할 때까지 늦추는 방법이다. 주로 최적화에 사용하지만 클래스, 인스턴스 초기화 때 발생하는 위험한 순환
문제를 해결하는 효과도 있다. 물론 접근시 비용이 늘어난다.&lt;/p&gt;

&lt;p&gt;멀티 쓰레드 환경에서는 지연초기화는 문제가 될 수 있다. 필드를 둘 이상의 쓰레드가 공유하면 동시에 여러 개를 초기화할 수 있다. 지연 초기화가 초기화 순환성(initialization circularity)
를 깨뜨릴거 같으면 synchronized를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;혹은 lazy initialization holder class를 사용할 수도 있다. 클래스는 클래스가 처음 쓰일 때 비로소 초기화 된다는 특성을 이용한 관용구다( 싱글톤에서도 유용하다. )
혹은 이중 검사(double-check) 관용구를 사용할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volatie&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldExample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldExample&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;FieldExample&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//할당&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 16 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Effective java</title>
        <link>/effective_java/2024/06/16/Effective-java-series-64.SyncSharedResources.html</link>
        <guid isPermaLink="true">/effective_java/2024/06/16/Effective-java-series-64.SyncSharedResources.html</guid>
        <description>&lt;h1 id=&quot;공유-중인-가변-데이터는-동기화하자---과도한-동기는-피하는게-좋다&quot;&gt;공유 중인 가변 데이터는 동기화하자  &amp;amp; 과도한 동기는 피하는게 좋다.&lt;/h1&gt;

&lt;h2 id=&quot;공유-중인-가변-데이터는-동기화하자&quot;&gt;공유 중인 가변 데이터는 동기화하자&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt;는 해당 메소드, 블록을 한 번에 한 쓰레드씩 수행하도록 보장한다. 즉, 객체를 하나의 일관된 상태에서 다른 일관된 상태로 변경시킨다. 동기화를
제대로 사용하면 어떤 메소드도 이 객체의 상태가 일관되지 않은 순간을 볼 수 없다.&lt;/p&gt;

&lt;p&gt;동기화 이외에 다른 쓰레드가 만든 변화를 체크하기 위한 용도로도 사용할 수 있다. 동기화는 일관성이 꺠진 상태를 볼 수 없게 하는 것은 물론, 동기화된 메소드나 블록에 들어간
쓰레드가 같은 락의 보호 하에 수행된 모든 이전 수정의 최종 결과를 보게 해준다.&lt;/p&gt;

&lt;p&gt;자바 명세는 쓰레드가 필드를 읽을 때 ‘수정이 완전히 반영된’ 값을 보장한다고 하지만, 쓰레드 간에도 보장하는가 하면 아니다. 따라서 동기화는 배타적 실행뿐만 아니라
쓰레드 사이의 안정적인 통신에 꼭 필요하다. 이는 쓰레드가 만든 변화가 다른 쓰레드에 언제 어떻게 보이는지를 규정한 자바의 메모리 모델 때문이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopRequested&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 코드가 있다고 하자 쓰레드 동기화를 사용하지 않으면, jvm이 코드 최적화를 할 때&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopRequested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로 바뀐다. 이는 hoisting 때문이다. 이런 잘못된 최적화로 synchronized를 사용하지 않으면  원하는대로 코드가 작동하지 않을 수 있다. 
혹은 위  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stopRequested&lt;/code&gt; 변수를 get, set으로 바꾸고 둘 다 synchronized를 붙이는 방법도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopRequested&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestedStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stopRequested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopRequested&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;읽기 쓰기 모두 동기화해야 한다. 변경도, 읽기도 모두 동기화 해야 상태를 보장할 수 있다. 
혹은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt;을 사용하는 방법도 있다. volatile은 해당 변수를 메인 메모리에 저장하도록 하는 예약어다.
물론 붙인다고 능사가 아니다. set 연산을 동기화해야 한다. 왜냐하면 쓰레드가 수정하고 반영하기 전 다른 쓰레드가 비집고 들어와 첫 번쨰와 같은 값을 반환할 수 있기 떄문이다.
이런 경우를 안전 실패(Safety failure)라고 한다.&lt;/p&gt;

&lt;p&gt;다른 방법으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.concurrent.atomic&lt;/code&gt;을 사용해서 원자성을 지킬 수 있다. 이 패키지에는 락 없이도 thread-safe한 클래스들이 담겨 있다.&lt;/p&gt;

&lt;h2 id=&quot;과도한-동기는-피하는게-좋다&quot;&gt;과도한 동기는 피하는게 좋다.&lt;/h2&gt;

&lt;p&gt;과도한 동기화는 당연히 성능 저하를 일으키고 심지어 교착상태에 빠뜨리기도 하고 결국 예측할 수 없는 동작을 낳기도 한다. 응답 불가, 안전 실패를 막으려면
동기화 메소드나 동기화 블록 안에서는 제어를 절대로 클라이언트에 넘기면 안된다. 즉 재정의 메소드를 넘겨도 안되고, 함수 객체도 실행하면 안된다. 이런 alien 메소드는
예외를 일으키거나, 교착상태에 빠지게 하거나 데이터를 훼손할 수도 있다.&lt;/p&gt;

&lt;p&gt;차라리 동기화 영역 바깥에서 alien 메소드를 호출(open call)하는게 좋다. 외부 메소드가 얼마나 오래 실행할지 모르기에 이는 현명한 선택이다. 즉, 실패 방지, 동시성 효율 제고를
해준다. 물론 동기화를 최소한으로 하는게 최고다. 동기화는 락을 거는게 문제가 아니라 Thread 간 경쟁으로 낭비(병렬성을 잃고 모든 코어가 메모리 일관성을 위한 지연 시간) 때문에
문제가 된다. 또한 JVM 최적화를 제한하기도 한다는 점이 큰 문제다. 그래서 차라리&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;동기화를 외부에서 하게 하거나&lt;/li&gt;
  &lt;li&gt;동기화를 아예 숨겨서 내부에서 하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;라는 방법이 있다. 2번은 차선책이다.  더 심화하면 lock-splitting, lock striping, nonblocking concurrency control 등 다양한 기법을 동원해서 
동시성을 높여줄 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;lock-splitting : 하나의 클래스에서 기능적으로 락을 분할( 읽기/ 쓰기락 )&lt;/li&gt;
  &lt;li&gt;lock striping : 자료 구조 관점에서 일부에만 락을 거는 것&lt;/li&gt;
  &lt;li&gt;nonblocking concurrency control :&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 16 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Effective java</title>
        <link>/effective_java/2024/06/16/Effective-java-series-63.Exception.html</link>
        <guid isPermaLink="true">/effective_java/2024/06/16/Effective-java-series-63.Exception.html</guid>
        <description>&lt;h1 id=&quot;되도록-표준-예외를-사용하자--추상화-수준에-맞는-예외를-던지자-예외-상세-메시지에-실패-관련-정보를-담자&quot;&gt;되도록 표준 예외를 사용하자 &amp;amp; 추상화 수준에 맞는 예외를 던지자&amp;amp; 예외 상세 메시지에 실패 관련 정보를 담자.&lt;/h1&gt;

&lt;h2 id=&quot;되도록-표준-예외를-사용하자&quot;&gt;되도록 표준 예외를 사용하자&lt;/h2&gt;

&lt;p&gt;표준 예외를 재사용하면 얻는게 많다. 이미 프로그래머들에게 익숙한 예외를 사용하기 떄문이다. 예를 들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IllegalArgumentException&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IllegalStateException&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConcurrentModificationException&lt;/code&gt; 등이 있다.&lt;/p&gt;

&lt;h2 id=&quot;추상화-수준에-맞는-예외를-던지자&quot;&gt;추상화 수준에 맞는 예외를 던지자&lt;/h2&gt;

&lt;p&gt;수행하려는 일과 관련이 없어 보이는 예외가 나오면 당황스러울 것이다. 저수준 예외를 처리하지 않고 바깥으로 전파하면 일어나는 일 이다.
이는 내부 구현을 외부로 노출시키는 일이다. 또한 내부 구현과 사용을 결합시키게 되는 일이 된다. 따라서 다음 릴리즈에서 바꾸면
다른 예외가 튀어나와 기존 클라이언트 프로그램을 깨지게 할 수 있다.&lt;/p&gt;

&lt;p&gt;차라리 이 때는 예외를 번역해서 던지자 예외 번역이란 저수준 예외를 받아서 고수준 예외로 다시 던지는 것을 의미한다.
예외를 번역할 때, 저수준 예외가 디버깅에 도움이 된다면 예외 연쇄(exceptionChaining)를 사용하는게 좋다.&lt;/p&gt;

&lt;p&gt;예외 연쇄란 문제의 근본 원인 저수준 예외를 고수준 예외에 실어보내는 것이다. 무턱대로 예외를 전파하는 것보다 좋은 방법이지만 그렇다고 남용하면 안된다.&lt;/p&gt;

&lt;h2 id=&quot;예외-상세-메시지에-실패-관련-정보를-담자&quot;&gt;예외 상세 메시지에 실패 관련 정보를 담자.&lt;/h2&gt;

&lt;p&gt;예외는 stack trace를 자동 캡쳐 출력한다. 예외 분석을 위한 초석이 된다. 관련 데이터를 모두 담아야 하지만 꼭 장황할 필요는 없다. 문제를 분석하는 사람은 
소스코드도 함께 보기 때문이다.&lt;/p&gt;

&lt;p&gt;예외를 최종 클라이언트에게 보여줄 메시지로 생각하면 안 된다. 최종 사용자에게는 훨씬 더 의미있는 메시지가 중요하다.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Effective java</title>
        <link>/effective_java/2024/06/16/Effective-java-series-62.CheckedUncheckedException.html</link>
        <guid isPermaLink="true">/effective_java/2024/06/16/Effective-java-series-62.CheckedUncheckedException.html</guid>
        <description>&lt;h1 id=&quot;복구할-수-있는-상황에는-검사-예외를-프로그래밍-오류에는-런타임-예외를&quot;&gt;복구할 수 있는 상황에는 검사 예외를, 프로그래밍 오류에는 런타임 예외를&lt;/h1&gt;

&lt;p&gt;호출하는 쪽에서 복구하리라 여겨지면 checkedException 을 던져서 구현자에게 회복을 요구할 수 있다. uncheckedException은 런타임/ 에러 가 있다. 
프로그래밍 오류는 runtimeException을 사용하면 된다. 대부분은 전제조건을 만족하지 못했을 때 사용한다. 에러는 JVM이 자원부족, 불변식 깨짐 등 더 이상 수행을
계속할 수 없는 상황을 의미한다. 따라서 에러는 직접 구현할 일이 거의 없다. 대부분의 상황에서 개발자들은 uncheckedException으로 runtimeException을
서브클래싱할 가능성이 높다.&lt;/p&gt;

&lt;p&gt;여기서 고민이 될거다. checkedException을 자주 사용하느게 좋은가? 검사 예외는 문제를 처리하게 해서 안정성을 높이게끔 해준다. 그런데 이 오류들이 쌓이면
피곤해진다. 다 처리해야하기 때문이다. 이를 회피하기 가장 쉬운 방법은 옵셔널을 반환하는 것이다. 차라리 빈 옵셔널을 반환하는게 좋다. 
물론 이 방법도 왜 예외가 발생한지 모르기 때문에 구체적 예외 타입 등을 알 수 없다.&lt;/p&gt;

&lt;p&gt;결론적으로 최대한 코드 내부에서 처리하되 옵셔널/ 에러 던지기를 잘 조절해서 던지는게 좋다.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Effective java</title>
        <link>/effective_java/2024/06/16/Effective-java-series-61.ConsiderException.html</link>
        <guid isPermaLink="true">/effective_java/2024/06/16/Effective-java-series-61.ConsiderException.html</guid>
        <description>&lt;h1 id=&quot;예외는-진짜-예외에만-사용하자&quot;&gt;예외는 진짜 예외에만 사용하자&lt;/h1&gt;

&lt;p&gt;예를 들어 for-loop을 exception으로 종료한다고 해보자. 나중에 보면 정상 종료를 위한 exception을 낸건지 진짜 에러인지 구분이 안 갈거다. 또한 
예외는 예외 상황에 쓸 용도로 설계됐으므로 JVM에서 최적화 대상이 아니다. 코드를 try-catch 블록 안에 넣으면 JVM이 할 수 있는 최적화가 제한된다.
이런 패널티를 받으면서 굳이 exception으로 비즈니스 로직을 사용해야 하는지는 의문이다.&lt;/p&gt;

&lt;p&gt;예외는 그냥 예외로만 사용하는 게 좋다. 제어 흐름용으로 사용하는 건 넌센스다. 그럼 exception 없이 제어하려면 어떻게 하면 될까? 단순하다. 상태 검사 로직을
넣으면 된다. 그것도 애매하면 옵셔널을 사용할 수도 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;외부 동기화 없이 멀티쓰레드를 사용한다면, 외부 요인으로 상태가 변할 수 있다면 옵셔널이나 특정 값을 사용한다.&lt;/li&gt;
  &lt;li&gt;성능이 중요한 상황에서 메소드가 상태 의존적 메소드 작업 일부를 중복 수행하면 옵셔널, 특정 값을 사용&lt;/li&gt;
  &lt;li&gt;이외에는 상태 검사가 나을 수 있다.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 16 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>Effective java</title>
        <link>/effective_java/2024/06/15/Effective-java-series-60.Optimize.html</link>
        <guid isPermaLink="true">/effective_java/2024/06/15/Effective-java-series-60.Optimize.html</guid>
        <description>&lt;h1 id=&quot;최적화는-신중히--컨벤션을-따르자&quot;&gt;최적화는 신중히 &amp;amp; 컨벤션을 따르자.&lt;/h1&gt;

&lt;h2 id=&quot;최적화는-신중히&quot;&gt;최적화는 신중히&lt;/h2&gt;

&lt;p&gt;성능 떄문에 견고한 구조를 희생하지는 말자. 빠른 프로그램보다는 좋은 프로그램을 작성하라. 고민 해볼만한 문구다. 이 말은 완성하기 전에는 성능을 무시하라는 말이 아니다.
구현상 문제는 여러 변 다듬어 최적화할 수 있지만 이키텍쳐는 수정하기가 어렵다. 따라서 설계부터 탄탄해야한다는 의미와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;성능을 제한하는 설계를 피하라.&lt;/li&gt;
  &lt;li&gt;API 설계시 성능에 주는 영향을 고려하라.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 정도를 고민해보면 될 것 같다. 보통 잘 설계하면 성능이 잘 나온다. 그러니 이미 망친 설계에서 좋은 성능을 위해 노력하는 건 앞 뒤가 맞지 않는다.
만약 해야만 한다면 프로파일링 도구에 도움을 받는 것도 좋다.&lt;/p&gt;

&lt;h2 id=&quot;컨벤션을-따르자&quot;&gt;컨벤션을 따르자.&lt;/h2&gt;

&lt;p&gt;자바는 컨벤션이 잘 정립됐다. 그리고 언어 명세에도 기술되어 있다. 이 규칙들은 특별한 이유가 없는 한 반드시 따라야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;역도메인을 패키지 이름으로 하는 것&lt;/li&gt;
  &lt;li&gt;각 요소는 8자 이하의 짧은 단어로 축약 (utilities 보다는 utils)&lt;/li&gt;
  &lt;li&gt;클래스, 인터페이스 일므은 하나 이상의 단어 조합으로, upper camel case&lt;/li&gt;
  &lt;li&gt;메소드 필드명은 lower camel case&lt;/li&gt;
  &lt;li&gt;상수는 upper case&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그외 get, set으로 시작하는 형태는 javaBeans 명세에 뿌리를 두고 있다.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jun 2024 00:00:00 +0900</pubDate>
      </item>
    
  </channel>
</rss>
